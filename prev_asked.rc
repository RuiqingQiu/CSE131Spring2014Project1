function: bool bool_two_args(bool b,int i){
  return b;
}

typedef int[19] ARR;
typedef ARR[20] ARR2;
funcptr: int(int x, int y) fp;

function : void arrRefTest(ARR2& a){
}
function: void arrRefTest2(ARR& b){
}
function : void arrRefTest3(int[19]& arr){
}
function: void main(){
  ARR2 test1;
  ARR test2;
  int[19] test4;
  
  /*
    Error, "prev_asked.rc": 
    Argument of type ARR not equivalent to reference parameter a, of type ARR2.
  */
  arrRefTest(test2); // Should fail as ARR not equivalent to ref paramter ARR2
  
  arrRefTest3(test4);//Pass
  arrRefTest3(test1);// Fail with the correct message
  arrRefTest3(test2); //pass
  arrRefTest3(test1[10]);//pass
  
  arrRefTest(test1); //Should pass
  arrRefTest2(test2);//should pass
  arrRefTest2(test1[10]);//should pass
  arrRefTest2(test4);// Should pass
  
  //Error,Type of expression referenced by array subscript (nullptr) is not of array or pointer type.
  nullptr[2];
  
  bool x = false;
  int y = 0;
  decltype(x+y) z;  //Error, Incompatible type bool to binary operator +, numeric expected.
  int flag = bool_two_args(main(),2.0);  //two errors here
  
  
  while(1){
    //Error, bool or int required for conditional test, nullptr found.
    if(2.0){
      //Error, bool or int required for conditional test, nullptr found.
      while(nullptr){
      }
    }
  }
  int *t;
  t = 5;// Error, Value of type int not assignable to variable of type int*.
 
  
  bool test10; 
  test10 = fp != nullptr;
  test10 = fp == nullptr;
  
  const int test11 = 10;
  y = sizeof(test11); 
}

//Error, Return required in function, none found.
function : int foo(int x){
  if(x>0){
    return x;
  }
}
  
//Array can only be passed by reference
//Error, Type of return expression (int[10]), not assignment compatible with function's return type (int).
function: int boo(int[10]& arr){
  return arr;
}





