//static int[10] aaa;
//static int x = false, bbb;

function : void tmp(){
  int* aa = ::aaa;
}

//return the address of an R-val, not ok
/*
function : int& test1(int a){
  return &(a+1);
}

//Should fail with not equivalence
function : float& test2(int a){
  return &a;
}
//Success case
function : int& test3(float a){
  return *(int*)&a;
}

const int x1 = 5;
static int y1 = x1 + 5;
*/
structdef MYS{
  int a,b;
};

structdef MYS2{
  int a,b;
};

/*Pass
function : int main(){
	return main();
}*/

//int* is not equivalent to the function return type
function: MYS& test4(MYS a1){
  int* a2;
  return a2;
}

//Pass
function: MYS& test6(MYS a1){
  MYS mys;
  return mys;
}

//Pass
function : void voidFunction(){}
function : void test18(){
  return voidFunction();
}

function: float& test5(){
	return (1.0 + 2.0);
}

//Check function return by value
//Check for assignable
function: int* test7(){
  float b;
  return b;
}

//MYS2 is not assignable to MYS
function : MYS test8(){
  MYS2 myStruct;
  return myStruct;
}

//MYS2 is not assignable to MYS
function : MYS* test16(){
  MYS2 myStruct;
  return myStruct;
}

//This should pass by return the address of the pointer points to bool a
function: bool** test9(){
  bool* a;
  return &a;
}

//This should pass since array is assignable to bool*
function : bool* test10(){
  bool[10] boolArr;
  return boolArr;
}

typedef MYS[10] MYSARRAY;
//This should fail since pointer is not assignable to array
function: MYSARRAY test11(){
  MYS* ptr;
  return ptr;
}

//This should not fail since array is assignable to pointer
function: MYS* test12(){
  MYSARRAY myArray;
  return myArray;
}

//check equivalence
function:int* test13(){
  return nullptr;
}

function:int* test21(){
  int* a  = nullptr;
  return a;
}

//Not a mod-l val
function:int& test14(){
  return nullptr;
}

//This should pass since it is a reference to int pointer
function:int*& test15(){
  return nullptr;
}

//Pass
function:int* test19(){
  float* a  = nullptr;
  return a;
}

//Fail
function:int& test22(){
  const int a = 10;
  int b;
  return a;
  return b++;
}


function: MYS* test20(){
  MYS* m;
  return m;
}

//Function call
function : void funcCall(){
    /*
    //Not a mod l-val;
	test19() = 10; 
	//Not assignable
	test15() = true;
	&test13();
	
	1++;
	//return by valud non-mod lval
	test21()++;
    //test6 returns reference to MYS
    test6().a++;
    MYS mys;
    test6(mys).a++;
    //Cannot cast struct type
    (int*)test6(mys);
    ++(test20() -> a)--;
    */ 
}




