
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Thu Apr 17 13:22:55 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Thu Apr 17 13:22:55 PDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\264\000\002\114\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\006\000\002\012\006\000\002\012" +
    "\010\000\002\013\007\000\002\013\011\000\002\051\003" +
    "\000\002\051\002\000\002\014\006\000\002\115\002\000" +
    "\002\014\011\000\002\015\003\000\002\015\004\000\002" +
    "\113\005\000\002\116\002\000\002\117\002\000\002\007" +
    "\017\000\002\120\002\000\002\121\002\000\002\010\015" +
    "\000\002\076\004\000\002\076\011\000\002\077\003\000" +
    "\002\077\011\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\101\006\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\102\003" +
    "\000\002\102\005\000\002\102\002\000\002\044\003\000" +
    "\002\044\002\000\002\042\003\000\002\042\004\000\002" +
    "\043\003\000\002\100\004\000\002\100\003\000\002\122" +
    "\002\000\002\123\002\000\002\021\007\000\002\016\003" +
    "\000\002\016\002\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\107\003\000\002" +
    "\107\002\000\002\110\003\000\002\110\005\000\002\072" +
    "\005\000\002\050\003\000\002\050\002\000\002\103\004" +
    "\000\002\103\006\000\002\104\003\000\002\104\005\000" +
    "\002\105\005\000\002\105\007\000\002\106\006\000\002" +
    "\106\010\000\002\071\004\000\002\071\006\000\002\071" +
    "\002\000\002\041\003\000\002\041\005\000\002\022\006" +
    "\000\002\023\004\000\002\023\002\000\002\124\002\000" +
    "\002\024\006\000\002\025\004\000\002\026\004\000\002" +
    "\027\007\000\002\030\004\000\002\030\005\000\002\031" +
    "\006\000\002\032\006\000\002\033\005\000\002\034\005" +
    "\000\002\035\003\000\002\035\005\000\002\036\003\000" +
    "\002\036\003\000\002\073\003\000\002\111\003\000\002" +
    "\111\002\000\002\112\003\000\002\112\005\000\002\053" +
    "\005\000\002\053\003\000\002\054\005\000\002\054\003" +
    "\000\002\055\005\000\002\055\003\000\002\056\005\000" +
    "\002\056\003\000\002\057\005\000\002\057\003\000\002" +
    "\060\005\000\002\060\003\000\002\061\005\000\002\061" +
    "\003\000\002\062\005\000\002\062\003\000\002\063\005" +
    "\000\002\063\003\000\002\064\005\000\002\064\003\000" +
    "\002\037\003\000\002\037\003\000\002\052\003\000\002" +
    "\052\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\045\003\000\002\045\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\047\003\000\002\047\003\000\002\065\004\000\002" +
    "\065\004\000\002\065\004\000\002\065\004\000\002\065" +
    "\006\000\002\065\006\000\002\065\006\000\002\065\004" +
    "\000\002\065\003\000\002\066\005\000\002\066\006\000" +
    "\002\066\005\000\002\066\004\000\002\066\006\000\002" +
    "\066\003\000\002\067\005\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\004\000" +
    "\002\067\003\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\040\002\001\011\001\014\001\021\001\025" +
    "\001\033\001\035\001\036\001\037\001\043\001\075\001" +
    "\076\001\100\001\103\001\110\001\001\002\000\004\002" +
    "\u0140\001\002\000\040\002\ufffd\011\uffee\014\uffee\021\uffee" +
    "\025\uffee\033\007\035\uffee\036\uffee\037\010\043\uffee\075" +
    "\014\076\011\100\024\103\uffee\110\uffee\001\002\000\040" +
    "\002\ufff6\011\ufff6\014\ufff6\021\ufff6\025\ufff6\033\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\043\ufff6\075\ufff6\076\ufff6\100\ufff6" +
    "\103\ufff6\110\ufff6\001\002\000\022\011\035\014\032\025" +
    "\027\035\036\036\247\037\u0134\043\040\110\033\001\002" +
    "\000\004\016\345\001\002\000\004\110\325\001\002\000" +
    "\024\011\035\014\032\021\250\025\027\035\036\036\247" +
    "\043\040\103\246\110\033\001\002\000\040\002\ufff9\011" +
    "\ufff9\014\ufff9\021\ufff9\025\ufff9\033\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\043\ufff9\075\ufff9\076\ufff9\100\ufff9\103\ufff9\110" +
    "\ufff9\001\002\000\024\011\uffef\014\uffef\021\uffef\025\uffef" +
    "\035\uffef\036\uffef\043\uffef\103\uffef\110\uffef\001\002\000" +
    "\040\002\ufffc\011\ufffc\014\ufffc\021\ufffc\025\ufffc\033\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\043\ufffc\075\ufffc\076\ufffc\100" +
    "\ufffc\103\ufffc\110\ufffc\001\002\000\040\002\ufff7\011\ufff7" +
    "\014\ufff7\021\ufff7\025\ufff7\033\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\043\ufff7\075\ufff7\076\ufff7\100\ufff7\103\ufff7\110\ufff7" +
    "\001\002\000\040\002\ufff5\011\ufff5\014\ufff5\021\ufff5\025" +
    "\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\043\ufff5\075\ufff5" +
    "\076\ufff5\100\ufff5\103\ufff5\110\ufff5\001\002\000\040\002" +
    "\ufffe\011\uffee\014\uffee\021\uffee\025\uffee\033\007\035\uffee" +
    "\036\uffee\037\010\043\uffee\075\014\076\011\100\024\103" +
    "\uffee\110\uffee\001\002\000\040\002\ufffa\011\ufffa\014\ufffa" +
    "\021\ufffa\025\ufffa\033\ufffa\035\ufffa\036\ufffa\037\ufffa\043" +
    "\ufffa\075\ufffa\076\ufffa\100\ufffa\103\ufffa\110\ufffa\001\002" +
    "\000\004\002\000\001\002\000\040\002\ufff8\011\ufff8\014" +
    "\ufff8\021\ufff8\025\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\043\ufff8\075\ufff8\076\ufff8\100\ufff8\103\ufff8\110\ufff8\001" +
    "\002\000\020\011\035\014\032\025\027\035\036\036\034" +
    "\043\040\110\033\001\002\000\004\110\236\001\002\000" +
    "\020\004\uffdd\046\uffdd\047\uffdd\070\uffdd\074\uffdd\110\uffdd" +
    "\111\uffdd\001\002\000\004\047\233\001\002\000\020\004" +
    "\uffdc\046\uffdc\047\uffdc\070\uffdc\074\uffdc\110\uffdc\111\uffdc" +
    "\001\002\000\016\004\uffd3\046\066\070\uffd3\074\062\110" +
    "\uffd3\111\uffd3\001\002\000\020\004\uffd6\046\uffd6\047\uffd6" +
    "\070\uffd6\074\uffd6\110\uffd6\111\uffd6\001\002\000\020\004" +
    "\uff4e\046\uff4e\047\uff4e\070\uff4e\074\uff4e\110\uff4e\111\uff4e" +
    "\001\002\000\004\016\041\001\002\000\020\004\uffd7\046" +
    "\uffd7\047\uffd7\070\uffd7\074\uffd7\110\uffd7\111\uffd7\001\002" +
    "\000\020\004\uffd8\046\uffd8\047\uffd8\070\uffd8\074\uffd8\110" +
    "\uffd8\111\uffd8\001\002\000\020\004\uffdb\046\uffdb\047\uffdb" +
    "\070\uffdb\074\uffdb\110\uffdb\111\uffdb\001\002\000\020\004" +
    "\uffd9\046\uffd9\047\uffd9\070\uffd9\074\uffd9\110\uffd9\111\uffd9" +
    "\001\002\000\020\011\035\014\032\025\027\035\036\043" +
    "\040\102\044\110\033\001\002\000\012\004\uffd1\047\uffd1" +
    "\074\062\111\uffd1\001\002\000\006\004\045\047\uffaf\001" +
    "\002\000\010\004\uffcc\047\uffcc\111\uffcc\001\002\000\006" +
    "\047\uffb0\111\uffb0\001\002\000\004\047\047\001\002\000" +
    "\022\011\035\014\032\025\027\035\036\036\034\043\040" +
    "\070\uffb4\110\033\001\002\000\006\004\045\111\uffaf\001" +
    "\002\000\006\020\055\070\uffb5\001\002\000\006\020\uffb3" +
    "\070\uffb3\001\002\000\004\070\054\001\002\000\012\004" +
    "\uffe0\070\uffe0\110\uffe0\111\uffe0\001\002\000\020\011\035" +
    "\014\032\025\027\035\036\036\034\043\040\110\033\001" +
    "\002\000\006\020\uffb2\070\uffb2\001\002\000\004\111\060" +
    "\001\002\000\006\020\uffb1\070\uffb1\001\002\000\010\004" +
    "\uffcd\047\uffcd\111\uffcd\001\002\000\016\004\uffce\047\uffce" +
    "\070\uffce\074\uffce\110\uffce\111\uffce\001\002\000\012\004" +
    "\uffd2\047\uffd2\074\062\111\uffd2\001\002\000\016\004\uffd0" +
    "\047\uffd0\070\uffd0\074\uffd0\110\uffd0\111\uffd0\001\002\000" +
    "\016\004\uffcf\047\uffcf\070\uffcf\074\uffcf\110\uffcf\111\uffcf" +
    "\001\002\000\046\004\121\017\131\034\114\047\123\052" +
    "\115\053\124\057\111\060\130\063\126\064\113\072\117" +
    "\074\132\077\103\104\110\105\127\106\112\107\074\111" +
    "\120\001\002\000\012\004\uffe1\070\uffe1\110\uffe1\111\uffe1" +
    "\001\002\000\014\004\uffd5\070\uffd5\074\062\110\uffd5\111" +
    "\uffd5\001\002\000\060\004\uff79\005\uff79\010\uff79\013\uff79" +
    "\020\uff79\031\uff79\040\uff79\041\uff79\045\uff79\050\uff79\051" +
    "\uff79\052\uff79\054\204\055\uff79\061\uff79\062\uff79\063\uff79" +
    "\065\uff79\066\uff79\070\uff79\071\uff79\073\206\074\205\001" +
    "\002\000\062\004\uff77\005\uff77\007\231\010\uff77\013\uff77" +
    "\020\uff77\031\uff77\040\uff77\041\uff77\045\uff77\050\uff77\051" +
    "\uff77\052\uff77\054\uff77\055\uff77\061\uff77\062\uff77\063\uff77" +
    "\065\uff77\066\uff77\070\uff77\071\uff77\073\uff77\074\uff77\001" +
    "\002\000\052\004\uff7b\005\uff7b\010\uff7b\013\uff7b\020\uff7b" +
    "\031\uff7b\040\uff7b\041\uff7b\045\uff7b\050\uff7b\051\uff7b\052" +
    "\201\055\uff7b\061\uff7b\062\uff7b\063\200\065\uff7b\066\uff7b" +
    "\070\uff7b\071\uff7b\001\002\000\076\004\uff54\005\uff54\006" +
    "\uff54\007\uff54\010\uff54\013\uff54\020\uff54\026\uff54\031\uff54" +
    "\040\uff54\041\uff54\045\uff54\046\uff54\047\uff54\050\uff54\051" +
    "\uff54\052\uff54\053\uff54\054\uff54\055\uff54\061\uff54\062\uff54" +
    "\063\uff54\064\uff54\065\uff54\066\uff54\070\uff54\071\uff54\073" +
    "\uff54\074\uff54\001\002\000\046\004\uff7d\005\uff7d\010\uff7d" +
    "\013\uff7d\020\uff7d\031\uff7d\040\176\041\172\045\uff7d\050" +
    "\174\051\173\055\uff7d\061\uff7d\062\uff7d\065\uff7d\066\uff7d" +
    "\070\uff7d\071\uff7d\001\002\000\036\004\uff7f\005\uff7f\010" +
    "\uff7f\013\uff7f\020\uff7f\031\170\045\uff7f\055\167\061\uff7f" +
    "\062\uff7f\065\uff7f\066\uff7f\070\uff7f\071\uff7f\001\002\000" +
    "\076\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\013\uff59" +
    "\020\uff59\026\uff59\031\uff59\040\uff59\041\uff59\045\uff59\046" +
    "\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59" +
    "\055\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59\066" +
    "\uff59\070\uff59\071\uff59\073\uff59\074\uff59\001\002\000\076" +
    "\004\uff5f\005\uff5f\006\215\007\uff5f\010\uff5f\013\uff5f\020" +
    "\uff5f\026\216\031\uff5f\040\uff5f\041\uff5f\045\uff5f\046\212" +
    "\047\213\050\uff5f\051\uff5f\052\uff5f\053\124\054\uff5f\055" +
    "\uff5f\061\uff5f\062\uff5f\063\uff5f\064\113\065\uff5f\066\uff5f" +
    "\070\uff5f\071\uff5f\073\uff5f\074\uff5f\001\002\000\032\004" +
    "\164\005\uff81\010\uff81\013\uff81\020\uff81\045\uff81\061\uff81" +
    "\062\uff81\065\uff81\066\uff81\070\uff81\071\uff81\001\002\000" +
    "\004\066\211\001\002\000\076\004\uff53\005\uff53\006\uff53" +
    "\007\uff53\010\uff53\013\uff53\020\uff53\026\uff53\031\uff53\040" +
    "\uff53\041\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53" +
    "\052\uff53\053\uff53\054\uff53\055\uff53\061\uff53\062\uff53\063" +
    "\uff53\064\uff53\065\uff53\066\uff53\070\uff53\071\uff53\073\uff53" +
    "\074\uff53\001\002\000\030\005\uff83\010\uff83\013\162\020" +
    "\uff83\045\uff83\061\uff83\062\uff83\065\uff83\066\uff83\070\uff83" +
    "\071\uff83\001\002\000\026\005\uff85\010\160\020\uff85\045" +
    "\uff85\061\uff85\062\uff85\065\uff85\066\uff85\070\uff85\071\uff85" +
    "\001\002\000\024\005\156\020\uff87\045\uff87\061\uff87\062" +
    "\uff87\065\uff87\066\uff87\070\uff87\071\uff87\001\002\000\022" +
    "\020\uff89\045\uff89\061\153\062\uff89\065\uff89\066\uff89\070" +
    "\uff89\071\uff89\001\002\000\076\004\uff55\005\uff55\006\uff55" +
    "\007\uff55\010\uff55\013\uff55\020\uff55\026\uff55\031\uff55\040" +
    "\uff55\041\uff55\045\uff55\046\uff55\047\uff55\050\uff55\051\uff55" +
    "\052\uff55\053\uff55\054\uff55\055\uff55\061\uff55\062\uff55\063" +
    "\uff55\064\uff55\065\uff55\066\uff55\070\uff55\071\uff55\073\uff55" +
    "\074\uff55\001\002\000\046\004\121\017\131\034\114\047" +
    "\123\052\115\053\124\057\111\060\130\063\126\064\113" +
    "\072\117\074\132\077\103\104\110\105\127\106\112\107" +
    "\074\111\120\001\002\000\076\004\uff57\005\uff57\006\uff57" +
    "\007\uff57\010\uff57\013\uff57\020\uff57\026\uff57\031\uff57\040" +
    "\uff57\041\uff57\045\uff57\046\uff57\047\uff57\050\uff57\051\uff57" +
    "\052\uff57\053\uff57\054\uff57\055\uff57\061\uff57\062\uff57\063" +
    "\uff57\064\uff57\065\uff57\066\uff57\070\uff57\071\uff57\073\uff57" +
    "\074\uff57\001\002\000\124\004\uff69\005\uff69\006\uff69\007" +
    "\uff69\010\uff69\013\uff69\017\uff69\020\uff69\026\uff69\031\uff69" +
    "\034\uff69\040\uff69\041\uff69\045\uff69\046\uff69\047\uff69\050" +
    "\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\057\uff69" +
    "\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066" +
    "\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074\uff69\077\uff69" +
    "\104\uff69\105\uff69\106\uff69\107\uff69\111\uff69\001\002\000" +
    "\076\004\uff52\005\uff52\006\uff52\007\uff52\010\uff52\013\uff52" +
    "\020\uff52\026\uff52\031\uff52\040\uff52\041\uff52\045\uff52\046" +
    "\uff52\047\uff52\050\uff52\051\uff52\052\uff52\053\uff52\054\uff52" +
    "\055\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\066" +
    "\uff52\070\uff52\071\uff52\073\uff52\074\uff52\001\002\000\046" +
    "\004\uff73\017\uff73\034\uff73\047\uff73\052\uff73\053\uff73\057" +
    "\uff73\060\uff73\063\uff73\064\uff73\072\uff73\074\uff73\077\uff73" +
    "\104\uff73\105\uff73\106\uff73\107\uff73\111\uff73\001\002\000" +
    "\010\020\uff8f\066\uff8f\071\uff8f\001\002\000\004\047\145" +
    "\001\002\000\076\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010" +
    "\uff4f\013\uff4f\020\uff4f\026\uff4f\031\uff4f\040\uff4f\041\uff4f" +
    "\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053" +
    "\uff4f\054\uff4f\055\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f" +
    "\065\uff4f\066\uff4f\070\uff4f\071\uff4f\073\uff4f\074\uff4f\001" +
    "\002\000\046\004\121\017\131\034\114\047\123\052\115" +
    "\053\124\057\111\060\130\063\126\064\113\072\117\074" +
    "\132\077\103\104\110\105\127\106\112\107\074\111\120" +
    "\001\002\000\046\004\121\017\131\034\114\047\123\052" +
    "\115\053\124\057\111\060\130\063\126\064\113\072\117" +
    "\074\132\077\103\104\110\105\127\106\112\107\074\111" +
    "\120\001\002\000\064\004\121\011\035\014\032\017\131" +
    "\025\027\034\114\035\036\036\034\043\040\047\123\052" +
    "\115\053\124\057\111\060\130\063\126\064\113\072\117" +
    "\074\132\077\103\104\110\105\127\106\112\107\074\110" +
    "\033\111\120\001\002\000\124\004\uff68\005\uff68\006\uff68" +
    "\007\uff68\010\uff68\013\uff68\017\uff68\020\uff68\026\uff68\031" +
    "\uff68\034\uff68\040\uff68\041\uff68\045\uff68\046\uff68\047\uff68" +
    "\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\055\uff68\057" +
    "\uff68\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68" +
    "\066\uff68\070\uff68\071\uff68\072\uff68\073\uff68\074\uff68\077" +
    "\uff68\104\uff68\105\uff68\106\uff68\107\uff68\111\uff68\001\002" +
    "\000\046\004\121\017\131\034\114\047\123\052\115\053" +
    "\124\057\111\060\130\063\126\064\113\072\117\074\132" +
    "\077\103\104\110\105\127\106\112\107\074\111\120\001" +
    "\002\000\046\004\uff74\017\uff74\034\uff74\047\uff74\052\uff74" +
    "\053\uff74\057\uff74\060\uff74\063\uff74\064\uff74\072\uff74\074" +
    "\uff74\077\uff74\104\uff74\105\uff74\106\uff74\107\uff74\111\uff74" +
    "\001\002\000\076\004\uff56\005\uff56\006\uff56\007\uff56\010" +
    "\uff56\013\uff56\020\uff56\026\uff56\031\uff56\040\uff56\041\uff56" +
    "\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56\052\uff56\053" +
    "\uff56\054\uff56\055\uff56\061\uff56\062\uff56\063\uff56\064\uff56" +
    "\065\uff56\066\uff56\070\uff56\071\uff56\073\uff56\074\uff56\001" +
    "\002\000\076\004\uff51\005\uff51\006\uff51\007\uff51\010\uff51" +
    "\013\uff51\020\uff51\026\uff51\031\uff51\040\uff51\041\uff51\045" +
    "\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51\053\uff51" +
    "\054\uff51\055\uff51\061\uff51\062\uff51\063\uff51\064\uff51\065" +
    "\uff51\066\uff51\070\uff51\071\uff51\073\uff51\074\uff51\001\002" +
    "\000\004\111\134\001\002\000\046\004\121\017\131\034" +
    "\114\047\123\052\115\053\124\057\111\060\130\063\126" +
    "\064\113\072\117\074\132\077\103\104\110\105\127\106" +
    "\112\107\074\111\120\001\002\000\062\004\uff67\005\uff67" +
    "\007\uff67\010\uff67\013\uff67\020\uff67\031\uff67\040\uff67\041" +
    "\uff67\045\uff67\050\uff67\051\uff67\052\uff67\054\uff67\055\uff67" +
    "\061\uff67\062\uff67\063\uff67\065\uff67\066\uff67\070\uff67\071" +
    "\uff67\073\uff67\074\uff67\001\002\000\076\004\uff50\005\uff50" +
    "\006\uff50\007\uff50\010\uff50\013\uff50\020\uff50\026\uff50\031" +
    "\uff50\040\uff50\041\uff50\045\uff50\046\uff50\047\uff50\050\uff50" +
    "\051\uff50\052\uff50\053\uff50\054\uff50\055\uff50\061\uff50\062" +
    "\uff50\063\uff50\064\uff50\065\uff50\066\uff50\070\uff50\071\uff50" +
    "\073\uff50\074\uff50\001\002\000\062\004\uff65\005\uff65\007" +
    "\uff65\010\uff65\013\uff65\020\uff65\031\uff65\040\uff65\041\uff65" +
    "\045\uff65\050\uff65\051\uff65\052\uff65\054\uff65\055\uff65\061" +
    "\uff65\062\uff65\063\uff65\065\uff65\066\uff65\070\uff65\071\uff65" +
    "\073\uff65\074\uff65\001\002\000\004\070\142\001\002\000" +
    "\004\070\140\001\002\000\046\004\121\017\131\034\114" +
    "\047\123\052\115\053\124\057\111\060\130\063\126\064" +
    "\113\072\117\074\132\077\103\104\110\105\127\106\112" +
    "\107\074\111\120\001\002\000\062\004\uff61\005\uff61\007" +
    "\uff61\010\uff61\013\uff61\020\uff61\031\uff61\040\uff61\041\uff61" +
    "\045\uff61\050\uff61\051\uff61\052\uff61\054\uff61\055\uff61\061" +
    "\uff61\062\uff61\063\uff61\065\uff61\066\uff61\070\uff61\071\uff61" +
    "\073\uff61\074\uff61\001\002\000\076\004\uff58\005\uff58\006" +
    "\uff58\007\uff58\010\uff58\013\uff58\020\uff58\026\uff58\031\uff58" +
    "\040\uff58\041\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\055\uff58\061\uff58\062\uff58" +
    "\063\uff58\064\uff58\065\uff58\066\uff58\070\uff58\071\uff58\073" +
    "\uff58\074\uff58\001\002\000\062\004\uff60\005\uff60\007\uff60" +
    "\010\uff60\013\uff60\020\uff60\031\uff60\040\uff60\041\uff60\045" +
    "\uff60\050\uff60\051\uff60\052\uff60\054\uff60\055\uff60\061\uff60" +
    "\062\uff60\063\uff60\065\uff60\066\uff60\070\uff60\071\uff60\073" +
    "\uff60\074\uff60\001\002\000\062\004\uff66\005\uff66\007\uff66" +
    "\010\uff66\013\uff66\020\uff66\031\uff66\040\uff66\041\uff66\045" +
    "\uff66\050\uff66\051\uff66\052\uff66\054\uff66\055\uff66\061\uff66" +
    "\062\uff66\063\uff66\065\uff66\066\uff66\070\uff66\071\uff66\073" +
    "\uff66\074\uff66\001\002\000\064\004\121\011\035\014\032" +
    "\017\131\025\027\034\114\035\036\036\034\043\040\047" +
    "\123\052\115\053\124\057\111\060\130\063\126\064\113" +
    "\072\117\074\132\077\103\104\110\105\127\106\112\107" +
    "\074\110\033\111\120\001\002\000\004\070\151\001\002" +
    "\000\004\070\150\001\002\000\062\004\uff62\005\uff62\007" +
    "\uff62\010\uff62\013\uff62\020\uff62\031\uff62\040\uff62\041\uff62" +
    "\045\uff62\050\uff62\051\uff62\052\uff62\054\uff62\055\uff62\061" +
    "\uff62\062\uff62\063\uff62\065\uff62\066\uff62\070\uff62\071\uff62" +
    "\073\uff62\074\uff62\001\002\000\062\004\uff63\005\uff63\007" +
    "\uff63\010\uff63\013\uff63\020\uff63\031\uff63\040\uff63\041\uff63" +
    "\045\uff63\050\uff63\051\uff63\052\uff63\054\uff63\055\uff63\061" +
    "\uff63\062\uff63\063\uff63\065\uff63\066\uff63\070\uff63\071\uff63" +
    "\073\uff63\074\uff63\001\002\000\062\004\uff64\005\uff64\007" +
    "\uff64\010\uff64\013\uff64\020\uff64\031\uff64\040\uff64\041\uff64" +
    "\045\uff64\050\uff64\051\uff64\052\uff64\054\uff64\055\uff64\061" +
    "\uff64\062\uff64\063\uff64\065\uff64\066\uff64\070\uff64\071\uff64" +
    "\073\uff64\074\uff64\001\002\000\046\004\121\017\131\034" +
    "\114\047\123\052\115\053\124\057\111\060\130\063\126" +
    "\064\113\072\117\074\132\077\103\104\110\105\127\106" +
    "\112\107\074\111\120\001\002\000\060\004\uff77\005\uff77" +
    "\010\uff77\013\uff77\020\uff77\031\uff77\040\uff77\041\uff77\045" +
    "\uff77\050\uff77\051\uff77\052\uff77\054\uff77\055\uff77\061\uff77" +
    "\062\uff77\063\uff77\065\uff77\066\uff77\070\uff77\071\uff77\073" +
    "\uff77\074\uff77\001\002\000\024\005\156\020\uff88\045\uff88" +
    "\061\uff88\062\uff88\065\uff88\066\uff88\070\uff88\071\uff88\001" +
    "\002\000\046\004\121\017\131\034\114\047\123\052\115" +
    "\053\124\057\111\060\130\063\126\064\113\072\117\074" +
    "\132\077\103\104\110\105\127\106\112\107\074\111\120" +
    "\001\002\000\026\005\uff86\010\160\020\uff86\045\uff86\061" +
    "\uff86\062\uff86\065\uff86\066\uff86\070\uff86\071\uff86\001\002" +
    "\000\046\004\121\017\131\034\114\047\123\052\115\053" +
    "\124\057\111\060\130\063\126\064\113\072\117\074\132" +
    "\077\103\104\110\105\127\106\112\107\074\111\120\001" +
    "\002\000\030\005\uff84\010\uff84\013\162\020\uff84\045\uff84" +
    "\061\uff84\062\uff84\065\uff84\066\uff84\070\uff84\071\uff84\001" +
    "\002\000\046\004\121\017\131\034\114\047\123\052\115" +
    "\053\124\057\111\060\130\063\126\064\113\072\117\074" +
    "\132\077\103\104\110\105\127\106\112\107\074\111\120" +
    "\001\002\000\032\004\164\005\uff82\010\uff82\013\uff82\020" +
    "\uff82\045\uff82\061\uff82\062\uff82\065\uff82\066\uff82\070\uff82" +
    "\071\uff82\001\002\000\046\004\121\017\131\034\114\047" +
    "\123\052\115\053\124\057\111\060\130\063\126\064\113" +
    "\072\117\074\132\077\103\104\110\105\127\106\112\107" +
    "\074\111\120\001\002\000\036\004\uff80\005\uff80\010\uff80" +
    "\013\uff80\020\uff80\031\170\045\uff80\055\167\061\uff80\062" +
    "\uff80\065\uff80\066\uff80\070\uff80\071\uff80\001\002\000\046" +
    "\004\121\017\131\034\114\047\123\052\115\053\124\057" +
    "\111\060\130\063\126\064\113\072\117\074\132\077\103" +
    "\104\110\105\127\106\112\107\074\111\120\001\002\000" +
    "\046\004\uff75\017\uff75\034\uff75\047\uff75\052\uff75\053\uff75" +
    "\057\uff75\060\uff75\063\uff75\064\uff75\072\uff75\074\uff75\077" +
    "\uff75\104\uff75\105\uff75\106\uff75\107\uff75\111\uff75\001\002" +
    "\000\046\004\uff76\017\uff76\034\uff76\047\uff76\052\uff76\053" +
    "\uff76\057\uff76\060\uff76\063\uff76\064\uff76\072\uff76\074\uff76" +
    "\077\uff76\104\uff76\105\uff76\106\uff76\107\uff76\111\uff76\001" +
    "\002\000\046\004\uff7e\005\uff7e\010\uff7e\013\uff7e\020\uff7e" +
    "\031\uff7e\040\176\041\172\045\uff7e\050\174\051\173\055" +
    "\uff7e\061\uff7e\062\uff7e\065\uff7e\066\uff7e\070\uff7e\071\uff7e" +
    "\001\002\000\046\004\uff6f\017\uff6f\034\uff6f\047\uff6f\052" +
    "\uff6f\053\uff6f\057\uff6f\060\uff6f\063\uff6f\064\uff6f\072\uff6f" +
    "\074\uff6f\077\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\111" +
    "\uff6f\001\002\000\046\004\uff70\017\uff70\034\uff70\047\uff70" +
    "\052\uff70\053\uff70\057\uff70\060\uff70\063\uff70\064\uff70\072" +
    "\uff70\074\uff70\077\uff70\104\uff70\105\uff70\106\uff70\107\uff70" +
    "\111\uff70\001\002\000\046\004\uff72\017\uff72\034\uff72\047" +
    "\uff72\052\uff72\053\uff72\057\uff72\060\uff72\063\uff72\064\uff72" +
    "\072\uff72\074\uff72\077\uff72\104\uff72\105\uff72\106\uff72\107" +
    "\uff72\111\uff72\001\002\000\046\004\121\017\131\034\114" +
    "\047\123\052\115\053\124\057\111\060\130\063\126\064" +
    "\113\072\117\074\132\077\103\104\110\105\127\106\112" +
    "\107\074\111\120\001\002\000\046\004\uff71\017\uff71\034" +
    "\uff71\047\uff71\052\uff71\053\uff71\057\uff71\060\uff71\063\uff71" +
    "\064\uff71\072\uff71\074\uff71\077\uff71\104\uff71\105\uff71\106" +
    "\uff71\107\uff71\111\uff71\001\002\000\052\004\uff7c\005\uff7c" +
    "\010\uff7c\013\uff7c\020\uff7c\031\uff7c\040\uff7c\041\uff7c\045" +
    "\uff7c\050\uff7c\051\uff7c\052\201\055\uff7c\061\uff7c\062\uff7c" +
    "\063\200\065\uff7c\066\uff7c\070\uff7c\071\uff7c\001\002\000" +
    "\046\004\uff6e\017\uff6e\034\uff6e\047\uff6e\052\uff6e\053\uff6e" +
    "\057\uff6e\060\uff6e\063\uff6e\064\uff6e\072\uff6e\074\uff6e\077" +
    "\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\111\uff6e\001\002" +
    "\000\046\004\uff6d\017\uff6d\034\uff6d\047\uff6d\052\uff6d\053" +
    "\uff6d\057\uff6d\060\uff6d\063\uff6d\064\uff6d\072\uff6d\074\uff6d" +
    "\077\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d\111\uff6d\001" +
    "\002\000\046\004\121\017\131\034\114\047\123\052\115" +
    "\053\124\057\111\060\130\063\126\064\113\072\117\074" +
    "\132\077\103\104\110\105\127\106\112\107\074\111\120" +
    "\001\002\000\060\004\uff7a\005\uff7a\010\uff7a\013\uff7a\020" +
    "\uff7a\031\uff7a\040\uff7a\041\uff7a\045\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\054\204\055\uff7a\061\uff7a\062\uff7a\063\uff7a\065" +
    "\uff7a\066\uff7a\070\uff7a\071\uff7a\073\206\074\205\001\002" +
    "\000\046\004\uff6a\017\uff6a\034\uff6a\047\uff6a\052\uff6a\053" +
    "\uff6a\057\uff6a\060\uff6a\063\uff6a\064\uff6a\072\uff6a\074\uff6a" +
    "\077\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\111\uff6a\001" +
    "\002\000\046\004\uff6c\017\uff6c\034\uff6c\047\uff6c\052\uff6c" +
    "\053\uff6c\057\uff6c\060\uff6c\063\uff6c\064\uff6c\072\uff6c\074" +
    "\uff6c\077\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\111\uff6c" +
    "\001\002\000\046\004\uff6b\017\uff6b\034\uff6b\047\uff6b\052" +
    "\uff6b\053\uff6b\057\uff6b\060\uff6b\063\uff6b\064\uff6b\072\uff6b" +
    "\074\uff6b\077\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\111" +
    "\uff6b\001\002\000\046\004\121\017\131\034\114\047\123" +
    "\052\115\053\124\057\111\060\130\063\126\064\113\072" +
    "\117\074\132\077\103\104\110\105\127\106\112\107\074" +
    "\111\120\001\002\000\060\004\uff78\005\uff78\010\uff78\013" +
    "\uff78\020\uff78\031\uff78\040\uff78\041\uff78\045\uff78\050\uff78" +
    "\051\uff78\052\uff78\054\uff78\055\uff78\061\uff78\062\uff78\063" +
    "\uff78\065\uff78\066\uff78\070\uff78\071\uff78\073\uff78\074\uff78" +
    "\001\002\000\012\004\uffd4\070\uffd4\110\uffd4\111\uffd4\001" +
    "\002\000\046\004\121\017\131\034\114\047\123\052\115" +
    "\053\124\057\111\060\130\063\126\064\113\072\117\074" +
    "\132\077\103\104\110\105\127\106\112\107\074\111\120" +
    "\001\002\000\050\004\121\017\131\034\114\047\123\052" +
    "\115\053\124\057\111\060\130\063\126\064\113\070\uff8d" +
    "\072\117\074\132\077\103\104\110\105\127\106\112\107" +
    "\074\111\120\001\002\000\076\004\uff5b\005\uff5b\006\uff5b" +
    "\007\uff5b\010\uff5b\013\uff5b\020\uff5b\026\uff5b\031\uff5b\040" +
    "\uff5b\041\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b" +
    "\052\uff5b\053\uff5b\054\uff5b\055\uff5b\061\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\065\uff5b\066\uff5b\070\uff5b\071\uff5b\073\uff5b" +
    "\074\uff5b\001\002\000\004\111\220\001\002\000\004\111" +
    "\217\001\002\000\076\004\uff5e\005\uff5e\006\uff5e\007\uff5e" +
    "\010\uff5e\013\uff5e\020\uff5e\026\uff5e\031\uff5e\040\uff5e\041" +
    "\uff5e\045\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e" +
    "\053\uff5e\054\uff5e\055\uff5e\061\uff5e\062\uff5e\063\uff5e\064" +
    "\uff5e\065\uff5e\066\uff5e\070\uff5e\071\uff5e\073\uff5e\074\uff5e" +
    "\001\002\000\076\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010" +
    "\uff5c\013\uff5c\020\uff5c\026\uff5c\031\uff5c\040\uff5c\041\uff5c" +
    "\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\055\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c" +
    "\065\uff5c\066\uff5c\070\uff5c\071\uff5c\073\uff5c\074\uff5c\001" +
    "\002\000\006\020\uff8c\070\uff8c\001\002\000\006\020\225" +
    "\070\uff8e\001\002\000\004\070\224\001\002\000\076\004" +
    "\uff5a\005\uff5a\006\uff5a\007\uff5a\010\uff5a\013\uff5a\020\uff5a" +
    "\026\uff5a\031\uff5a\040\uff5a\041\uff5a\045\uff5a\046\uff5a\047" +
    "\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\055\uff5a" +
    "\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\070" +
    "\uff5a\071\uff5a\073\uff5a\074\uff5a\001\002\000\046\004\121" +
    "\017\131\034\114\047\123\052\115\053\124\057\111\060" +
    "\130\063\126\064\113\072\117\074\132\077\103\104\110" +
    "\105\127\106\112\107\074\111\120\001\002\000\006\020" +
    "\uff8b\070\uff8b\001\002\000\004\066\230\001\002\000\076" +
    "\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\013\uff5d\020" +
    "\uff5d\026\uff5d\031\uff5d\040\uff5d\041\uff5d\045\uff5d\046\uff5d" +
    "\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054\uff5d\055" +
    "\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d" +
    "\070\uff5d\071\uff5d\073\uff5d\074\uff5d\001\002\000\046\004" +
    "\121\017\131\034\114\047\123\052\115\053\124\057\111" +
    "\060\130\063\126\064\113\072\117\074\132\077\103\104" +
    "\110\105\127\106\112\107\074\111\120\001\002\000\020" +
    "\020\uff8a\045\uff8a\062\uff8a\065\uff8a\066\uff8a\070\uff8a\071" +
    "\uff8a\001\002\000\046\004\121\017\131\034\114\047\123" +
    "\052\115\053\124\057\111\060\130\063\126\064\113\072" +
    "\117\074\132\077\103\104\110\105\127\106\112\107\074" +
    "\111\120\001\002\000\006\061\153\070\235\001\002\000" +
    "\020\004\uffda\046\uffda\047\uffda\070\uffda\074\uffda\110\uffda" +
    "\111\uffda\001\002\000\006\020\uffac\071\uffac\001\002\000" +
    "\006\020\240\071\241\001\002\000\004\110\242\001\002" +
    "\000\134\002\uffed\004\uffed\011\uffed\012\uffed\014\uffed\015" +
    "\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\042" +
    "\uffed\043\uffed\045\uffed\047\uffed\052\uffed\053\uffed\056\uffed" +
    "\057\uffed\060\uffed\063\uffed\064\uffed\065\uffed\067\uffed\072" +
    "\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed" +
    "\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111" +
    "\uffed\001\002\000\006\020\uffab\071\uffab\001\002\000\040" +
    "\002\ufffb\011\ufffb\014\ufffb\021\ufffb\025\ufffb\033\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\043\ufffb\075\ufffb\076\ufffb\100\ufffb" +
    "\103\ufffb\110\ufffb\001\002\000\010\046\066\074\062\111" +
    "\uffd3\001\002\000\010\046\uffdf\074\uffdf\111\uffdf\001\002" +
    "\000\004\111\300\001\002\000\004\016\272\001\002\000" +
    "\022\011\035\014\032\025\027\035\036\036\247\043\040" +
    "\103\252\110\033\001\002\000\010\046\066\074\062\111" +
    "\uffd3\001\002\000\004\111\253\001\002\000\004\007\254" +
    "\001\002\000\046\004\121\017\131\034\114\047\123\052" +
    "\115\053\124\057\111\060\130\063\126\064\113\072\117" +
    "\074\132\077\103\104\110\105\127\106\112\107\074\111" +
    "\120\001\002\000\004\071\256\001\002\000\134\002\ufff0" +
    "\004\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\042\ufff0\043\ufff0\045" +
    "\ufff0\047\ufff0\052\ufff0\053\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\067\ufff0\072\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\103\ufff0\104\ufff0" +
    "\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\001\002\000" +
    "\004\111\267\001\002\000\006\020\261\071\262\001\002" +
    "\000\010\046\066\074\062\111\uffd3\001\002\000\134\002" +
    "\ufff1\004\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\042\ufff1\043\ufff1" +
    "\045\ufff1\047\ufff1\052\ufff1\053\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\067\ufff1\072\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\103\ufff1\104" +
    "\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\001\002" +
    "\000\004\111\264\001\002\000\004\007\265\001\002\000" +
    "\046\004\121\017\131\034\114\047\123\052\115\053\124" +
    "\057\111\060\130\063\126\064\113\072\117\074\132\077" +
    "\103\104\110\105\127\106\112\107\074\111\120\001\002" +
    "\000\006\020\uffa7\071\uffa7\001\002\000\004\007\270\001" +
    "\002\000\046\004\121\017\131\034\114\047\123\052\115" +
    "\053\124\057\111\060\130\063\126\064\113\072\117\074" +
    "\132\077\103\104\110\105\127\106\112\107\074\111\120" +
    "\001\002\000\006\020\uffa8\071\uffa8\001\002\000\020\011" +
    "\035\014\032\025\027\035\036\043\040\102\044\110\033" +
    "\001\002\000\006\004\045\047\uffaf\001\002\000\004\047" +
    "\275\001\002\000\022\011\035\014\032\025\027\035\036" +
    "\036\034\043\040\070\uffb4\110\033\001\002\000\004\070" +
    "\277\001\002\000\010\046\uffde\074\uffde\111\uffde\001\002" +
    "\000\004\007\301\001\002\000\046\004\121\017\131\034" +
    "\114\047\123\052\115\053\124\057\111\060\130\063\126" +
    "\064\113\072\117\074\132\077\103\104\110\105\127\106" +
    "\112\107\074\111\120\001\002\000\004\071\303\001\002" +
    "\000\134\002\ufff2\004\ufff2\011\ufff2\012\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\042" +
    "\ufff2\043\ufff2\045\ufff2\047\ufff2\052\ufff2\053\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2\072" +
    "\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111" +
    "\ufff2\001\002\000\004\111\323\001\002\000\006\020\306" +
    "\071\307\001\002\000\010\046\066\074\062\111\uffd3\001" +
    "\002\000\134\002\ufff3\004\ufff3\011\ufff3\012\ufff3\014\ufff3" +
    "\015\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\042\ufff3\043\ufff3\045\ufff3\047\ufff3\052\ufff3\053\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3" +
    "\072\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\101" +
    "\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3" +
    "\111\ufff3\001\002\000\004\111\311\001\002\000\010\007" +
    "\313\020\uffa4\071\uffa4\001\002\000\006\020\uffa9\071\uffa9" +
    "\001\002\000\050\004\121\017\131\034\114\045\315\047" +
    "\123\052\115\053\124\057\111\060\130\063\126\064\113" +
    "\072\117\074\132\077\103\104\110\105\127\106\112\107" +
    "\074\111\120\001\002\000\006\020\uffa6\071\uffa6\001\002" +
    "\000\046\004\121\017\131\034\114\047\123\052\115\053" +
    "\124\057\111\060\130\063\126\064\113\072\117\074\132" +
    "\077\103\104\110\105\127\106\112\107\074\111\120\001" +
    "\002\000\006\020\uffa3\065\uffa3\001\002\000\006\020\321" +
    "\065\320\001\002\000\006\020\uffa5\071\uffa5\001\002\000" +
    "\046\004\121\017\131\034\114\047\123\052\115\053\124" +
    "\057\111\060\130\063\126\064\113\072\117\074\132\077" +
    "\103\104\110\105\127\106\112\107\074\111\120\001\002" +
    "\000\006\020\uffa2\065\uffa2\001\002\000\010\007\313\020" +
    "\uffa4\071\uffa4\001\002\000\006\020\uffaa\071\uffaa\001\002" +
    "\000\004\045\326\001\002\000\020\011\uffec\014\uffec\025" +
    "\uffec\035\uffec\036\uffec\043\uffec\110\uffec\001\002\000\020" +
    "\011\035\014\032\025\027\035\036\036\247\043\040\110" +
    "\033\001\002\000\010\046\066\074\062\111\uffd3\001\002" +
    "\000\022\011\035\014\032\025\027\035\036\036\247\043" +
    "\040\065\333\110\033\001\002\000\022\011\uffea\014\uffea" +
    "\025\uffea\035\uffea\036\uffea\043\uffea\065\uffea\110\uffea\001" +
    "\002\000\004\071\335\001\002\000\022\011\uffe9\014\uffe9" +
    "\025\uffe9\035\uffe9\036\uffe9\043\uffe9\065\uffe9\110\uffe9\001" +
    "\002\000\134\002\uffeb\004\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\042\uffeb\043\uffeb\045\uffeb\047\uffeb\052\uffeb\053\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\063\uffeb\064\uffeb\065\uffeb\067\uffeb" +
    "\072\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101" +
    "\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb" +
    "\111\uffeb\001\002\000\004\111\344\001\002\000\006\020" +
    "\340\071\341\001\002\000\010\046\066\074\062\111\uffd3" +
    "\001\002\000\022\011\uffe8\014\uffe8\025\uffe8\035\uffe8\036" +
    "\uffe8\043\uffe8\065\uffe8\110\uffe8\001\002\000\004\111\343" +
    "\001\002\000\006\020\uffad\071\uffad\001\002\000\006\020" +
    "\uffae\071\uffae\001\002\000\020\011\035\014\032\025\027" +
    "\035\036\043\040\102\044\110\033\001\002\000\006\004" +
    "\045\111\uffaf\001\002\000\004\111\350\001\002\000\004" +
    "\047\uffe7\001\002\000\004\047\352\001\002\000\022\011" +
    "\035\014\032\025\027\035\036\036\034\043\040\070\uffb4" +
    "\110\033\001\002\000\004\070\354\001\002\000\004\045" +
    "\uffe6\001\002\000\004\045\356\001\002\000\126\004\121" +
    "\011\uffee\012\u0106\014\uffee\015\376\017\131\021\uffee\022" +
    "\362\023\364\024\363\025\uffee\032\u0103\034\114\035\uffee" +
    "\036\uffee\042\u010a\043\uffee\045\371\047\123\052\115\053" +
    "\124\056\372\057\111\060\130\063\126\064\113\065\uffc7" +
    "\067\366\072\117\074\132\075\014\076\011\077\103\100" +
    "\024\101\361\103\uffee\104\110\105\127\106\112\107\074" +
    "\110\uffee\111\120\001\002\000\126\004\uffbb\011\uffbb\012" +
    "\uffbb\014\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\042" +
    "\uffbb\043\uffbb\045\uffbb\047\uffbb\052\uffbb\053\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\072" +
    "\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111" +
    "\uffbb\001\002\000\126\004\uffba\011\uffba\012\uffba\014\uffba" +
    "\015\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\032\uffba\034\uffba\035\uffba\036\uffba\042\uffba\043\uffba" +
    "\045\uffba\047\uffba\052\uffba\053\uffba\056\uffba\057\uffba\060" +
    "\uffba\063\uffba\064\uffba\065\uffba\067\uffba\072\uffba\074\uffba" +
    "\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\103\uffba\104" +
    "\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\001\002" +
    "\000\046\004\121\017\131\034\114\047\123\052\115\053" +
    "\124\057\111\060\130\063\126\064\113\072\117\074\132" +
    "\077\103\104\110\105\127\106\112\107\074\111\120\001" +
    "\002\000\004\071\u012f\001\002\000\046\004\121\017\131" +
    "\034\114\047\123\052\115\053\124\057\111\060\130\063" +
    "\126\064\113\072\117\074\132\077\103\104\110\105\127" +
    "\106\112\107\074\111\120\001\002\000\004\062\u0125\001" +
    "\002\000\126\004\uffb9\011\uffb9\012\uffb9\014\uffb9\015\uffb9" +
    "\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\032" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\047\uffb9\052\uffb9\053\uffb9\056\uffb9\057\uffb9\060\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\067\uffb9\072\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\100\uffb9\101\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\001\002\000\050" +
    "\004\121\017\131\034\114\047\123\052\115\053\124\057" +
    "\111\060\130\063\126\064\113\071\u0123\072\117\074\132" +
    "\077\103\104\110\105\127\106\112\107\074\111\120\001" +
    "\002\000\126\004\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8" +
    "\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\032" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\042\uffb8\043\uffb8\045\uffb8" +
    "\047\uffb8\052\uffb8\053\uffb8\056\uffb8\057\uffb8\060\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\067\uffb8\072\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\077\uffb8\100\uffb8\101\uffb8\103\uffb8\104\uffb8\105" +
    "\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\001\002\000\126" +
    "\004\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\017\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\032\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\042\uffbe\043\uffbe\045\uffbe\047\uffbe\052" +
    "\uffbe\053\uffbe\056\uffbe\057\uffbe\060\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\067\uffbe\072\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\107\uffbe\110\uffbe\111\uffbe\001\002\000\126\004\uffcb\011" +
    "\uffcb\012\uffcb\014\uffcb\015\uffcb\017\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\032\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\042\uffcb\043\uffcb\045\uffcb\047\uffcb\052\uffcb\053\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb\067" +
    "\uffcb\072\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb" +
    "\101\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110" +
    "\uffcb\111\uffcb\001\002\000\046\004\121\017\131\034\114" +
    "\047\123\052\115\053\124\057\111\060\130\063\126\064" +
    "\113\072\117\074\132\077\103\104\110\105\127\106\112" +
    "\107\074\111\120\001\002\000\126\004\121\011\uffee\012" +
    "\u0106\014\uffee\015\376\017\131\021\uffee\022\362\023\364" +
    "\024\363\025\uffee\032\u0103\034\114\035\uffee\036\uffee\042" +
    "\u010a\043\uffee\045\371\047\123\052\115\053\124\056\372" +
    "\057\111\060\130\063\126\064\113\065\uffc8\067\366\072" +
    "\117\074\132\075\014\076\011\077\103\100\024\101\361" +
    "\103\uffee\104\110\105\127\106\112\107\074\110\uffee\111" +
    "\120\001\002\000\126\004\uffb7\011\uffb7\012\uffb7\014\uffb7" +
    "\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\042\uffb7\043\uffb7" +
    "\045\uffb7\047\uffb7\052\uffb7\053\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\072\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\103\uffb7\104" +
    "\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\001\002" +
    "\000\126\004\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\042\uffc1\043\uffc1\045\uffc1\047" +
    "\uffc1\052\uffc1\053\uffc1\056\uffc1\057\uffc1\060\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\067\uffc1\072\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\001\002\000\004\044" +
    "\u0118\001\002\000\126\004\uffbf\011\uffbf\012\uffbf\014\uffbf" +
    "\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\042\uffbf\043\uffbf" +
    "\045\uffbf\047\uffbf\052\uffbf\053\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\072\uffbf\074\uffbf" +
    "\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\103\uffbf\104" +
    "\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\001\002" +
    "\000\126\004\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\017" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\032\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\042\uffc2\043\uffc2\045\uffc2\047" +
    "\uffc2\052\uffc2\053\uffc2\056\uffc2\057\uffc2\060\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\067\uffc2\072\uffc2\074\uffc2\075\uffc2\076" +
    "\uffc2\077\uffc2\100\uffc2\101\uffc2\103\uffc2\104\uffc2\105\uffc2" +
    "\106\uffc2\107\uffc2\110\uffc2\111\uffc2\001\002\000\004\071" +
    "\u0117\001\002\000\004\065\u0116\001\002\000\004\047\u0112" +
    "\001\002\000\126\004\uffc4\011\uffc4\012\uffc4\014\uffc4\015" +
    "\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\032\uffc4\034\uffc4\035\uffc4\036\uffc4\042\uffc4\043\uffc4\045" +
    "\uffc4\047\uffc4\052\uffc4\053\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\067\uffc4\072\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\103\uffc4\104\uffc4" +
    "\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\001\002\000" +
    "\126\004\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6\017\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\032\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\042\uffc6\043\uffc6\045\uffc6\047\uffc6" +
    "\052\uffc6\053\uffc6\056\uffc6\057\uffc6\060\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\067\uffc6\072\uffc6\074\uffc6\075\uffc6\076\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\103\uffc6\104\uffc6\105\uffc6\106" +
    "\uffc6\107\uffc6\110\uffc6\111\uffc6\001\002\000\004\071\u0111" +
    "\001\002\000\126\004\uffc3\011\uffc3\012\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\032\uffc3\034\uffc3\035\uffc3\036\uffc3\042\uffc3\043\uffc3\045" +
    "\uffc3\047\uffc3\052\uffc3\053\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\067\uffc3\072\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\001\002\000" +
    "\126\004\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\032\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\042\uffbc\043\uffbc\045\uffbc\047\uffbc" +
    "\052\uffbc\053\uffbc\056\uffbc\057\uffbc\060\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\067\uffbc\072\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\103\uffbc\104\uffbc\105\uffbc\106" +
    "\uffbc\107\uffbc\110\uffbc\111\uffbc\001\002\000\126\004\uffb6" +
    "\011\uffb6\012\uffb6\014\uffb6\015\uffb6\017\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\032\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\042\uffb6\043\uffb6\045\uffb6\047\uffb6\052\uffb6\053" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\067\uffb6\072\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\111\uffb6\001\002\000\046\004\121\017\131\034" +
    "\114\047\123\052\115\053\124\057\111\060\130\063\126" +
    "\064\113\072\117\074\132\077\103\104\110\105\127\106" +
    "\112\107\074\111\120\001\002\000\126\004\uffbd\011\uffbd" +
    "\012\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\042\uffbd\043\uffbd\045\uffbd\047\uffbd\052\uffbd\053\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\063\uffbd\064\uffbd\065\uffbd\067\uffbd" +
    "\072\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd" +
    "\111\uffbd\001\002\000\004\045\371\001\002\000\130\004" +
    "\uff9f\011\uff9f\012\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f" +
    "\022\uff9f\023\uff9f\024\uff9f\025\uff9f\027\u010f\032\uff9f\034" +
    "\uff9f\035\uff9f\036\uff9f\042\uff9f\043\uff9f\045\uff9f\047\uff9f" +
    "\052\uff9f\053\uff9f\056\uff9f\057\uff9f\060\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\067\uff9f\072\uff9f\074\uff9f\075\uff9f\076\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\103\uff9f\104\uff9f\105\uff9f\106" +
    "\uff9f\107\uff9f\110\uff9f\111\uff9f\001\002\000\126\004\uffa1" +
    "\011\uffa1\012\uffa1\014\uffa1\015\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\032\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\042\uffa1\043\uffa1\045\uffa1\047\uffa1\052\uffa1\053" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\067\uffa1\072\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100" +
    "\uffa1\101\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1" +
    "\110\uffa1\111\uffa1\001\002\000\004\045\371\001\002\000" +
    "\126\004\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\017\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\032\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\042\uffa0\043\uffa0\045\uffa0\047\uffa0" +
    "\052\uffa0\053\uffa0\056\uffa0\057\uffa0\060\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\067\uffa0\072\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\100\uffa0\101\uffa0\103\uffa0\104\uffa0\105\uffa0\106" +
    "\uffa0\107\uffa0\110\uffa0\111\uffa0\001\002\000\126\004\uff9c" +
    "\011\uff9c\012\uff9c\014\uff9c\015\uff9c\017\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\025\uff9c\032\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\042\uff9c\043\uff9c\045\uff9c\047\uff9c\052\uff9c\053" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\067\uff9c\072\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100" +
    "\uff9c\101\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c" +
    "\110\uff9c\111\uff9c\001\002\000\046\004\121\017\131\034" +
    "\114\047\123\052\115\053\124\057\111\060\130\063\126" +
    "\064\113\072\117\074\132\077\103\104\110\105\127\106" +
    "\112\107\074\111\120\001\002\000\004\070\u0114\001\002" +
    "\000\004\071\u0115\001\002\000\126\004\uff9a\011\uff9a\012" +
    "\uff9a\014\uff9a\015\uff9a\017\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\032\uff9a\034\uff9a\035\uff9a\036\uff9a\042" +
    "\uff9a\043\uff9a\045\uff9a\047\uff9a\052\uff9a\053\uff9a\056\uff9a" +
    "\057\uff9a\060\uff9a\063\uff9a\064\uff9a\065\uff9a\067\uff9a\072" +
    "\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a" +
    "\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\111" +
    "\uff9a\001\002\000\040\002\uffe5\011\uffe5\014\uffe5\021\uffe5" +
    "\025\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\043\uffe5\075" +
    "\uffe5\076\uffe5\100\uffe5\103\uffe5\110\uffe5\001\002\000\126" +
    "\004\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\032\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\042\uffc0\043\uffc0\045\uffc0\047\uffc0\052" +
    "\uffc0\053\uffc0\056\uffc0\057\uffc0\060\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\067\uffc0\072\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\101\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0" +
    "\107\uffc0\110\uffc0\111\uffc0\001\002\000\046\004\121\017" +
    "\131\034\114\047\123\052\115\053\124\057\111\060\130" +
    "\063\126\064\113\072\117\074\132\077\103\104\110\105" +
    "\127\106\112\107\074\111\120\001\002\000\004\071\u011a" +
    "\001\002\000\126\004\uff97\011\uff97\012\uff97\014\uff97\015" +
    "\uff97\017\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\032\uff97\034\uff97\035\uff97\036\uff97\042\uff97\043\uff97\045" +
    "\uff97\047\uff97\052\uff97\053\uff97\056\uff97\057\uff97\060\uff97" +
    "\063\uff97\064\uff97\065\uff97\067\uff97\072\uff97\074\uff97\075" +
    "\uff97\076\uff97\077\uff97\100\uff97\101\uff97\103\uff97\104\uff97" +
    "\105\uff97\106\uff97\107\uff97\110\uff97\111\uff97\001\002\000" +
    "\126\004\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\032\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\042\uffc5\043\uffc5\045\uffc5\047\uffc5" +
    "\052\uffc5\053\uffc5\056\uffc5\057\uffc5\060\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\067\uffc5\072\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\100\uffc5\101\uffc5\103\uffc5\104\uffc5\105\uffc5\106" +
    "\uffc5\107\uffc5\110\uffc5\111\uffc5\001\002\000\004\071\u011d" +
    "\001\002\000\126\004\uff95\011\uff95\012\uff95\014\uff95\015" +
    "\uff95\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\032\uff95\034\uff95\035\uff95\036\uff95\042\uff95\043\uff95\045" +
    "\uff95\047\uff95\052\uff95\053\uff95\056\uff95\057\uff95\060\uff95" +
    "\063\uff95\064\uff95\065\uff95\067\uff95\072\uff95\074\uff95\075" +
    "\uff95\076\uff95\077\uff95\100\uff95\101\uff95\103\uff95\104\uff95" +
    "\105\uff95\106\uff95\107\uff95\110\uff95\111\uff95\001\002\000" +
    "\126\004\121\011\uffee\012\u0106\014\uffee\015\376\017\131" +
    "\021\uffee\022\362\023\364\024\363\025\uffee\032\u0103\034" +
    "\114\035\uffee\036\uffee\042\u010a\043\uffee\045\371\047\123" +
    "\052\115\053\124\056\372\057\111\060\130\063\126\064" +
    "\113\065\uffc7\067\366\072\117\074\132\075\014\076\011" +
    "\077\103\100\024\101\361\103\uffee\104\110\105\127\106" +
    "\112\107\074\110\uffee\111\120\001\002\000\004\065\uffca" +
    "\001\002\000\004\065\u0121\001\002\000\130\004\uffc9\011" +
    "\uffc9\012\uffc9\014\uffc9\015\uffc9\017\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\027\uffc9\032\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\042\uffc9\043\uffc9\045\uffc9\047\uffc9\052\uffc9" +
    "\053\uffc9\056\uffc9\057\uffc9\060\uffc9\063\uffc9\064\uffc9\065" +
    "\uffc9\067\uffc9\072\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\101\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107" +
    "\uffc9\110\uffc9\111\uffc9\001\002\000\004\071\u0124\001\002" +
    "\000\126\004\uff99\011\uff99\012\uff99\014\uff99\015\uff99\017" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\032\uff99" +
    "\034\uff99\035\uff99\036\uff99\042\uff99\043\uff99\045\uff99\047" +
    "\uff99\052\uff99\053\uff99\056\uff99\057\uff99\060\uff99\063\uff99" +
    "\064\uff99\065\uff99\067\uff99\072\uff99\074\uff99\075\uff99\076" +
    "\uff99\077\uff99\100\uff99\101\uff99\103\uff99\104\uff99\105\uff99" +
    "\106\uff99\107\uff99\110\uff99\111\uff99\001\002\000\126\004" +
    "\uff98\011\uff98\012\uff98\014\uff98\015\uff98\017\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\032\uff98\034\uff98\035" +
    "\uff98\036\uff98\042\uff98\043\uff98\045\uff98\047\uff98\052\uff98" +
    "\053\uff98\056\uff98\057\uff98\060\uff98\063\uff98\064\uff98\065" +
    "\uff98\067\uff98\072\uff98\074\uff98\075\uff98\076\uff98\077\uff98" +
    "\100\uff98\101\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107" +
    "\uff98\110\uff98\111\uff98\001\002\000\050\004\121\017\131" +
    "\030\u0128\034\114\047\123\052\115\053\124\057\111\060" +
    "\130\063\126\064\113\072\117\074\132\077\103\104\110" +
    "\105\127\106\112\107\074\111\120\001\002\000\006\062" +
    "\u012a\071\u012b\001\002\000\006\062\uff93\071\uff93\001\002" +
    "\000\006\062\uff90\071\uff90\001\002\000\006\062\uff91\071" +
    "\uff91\001\002\000\050\004\121\017\131\030\u0128\034\114" +
    "\047\123\052\115\053\124\057\111\060\130\063\126\064" +
    "\113\072\117\074\132\077\103\104\110\105\127\106\112" +
    "\107\074\111\120\001\002\000\126\004\uff96\011\uff96\012" +
    "\uff96\014\uff96\015\uff96\017\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\032\uff96\034\uff96\035\uff96\036\uff96\042" +
    "\uff96\043\uff96\045\uff96\047\uff96\052\uff96\053\uff96\056\uff96" +
    "\057\uff96\060\uff96\063\uff96\064\uff96\065\uff96\067\uff96\072" +
    "\uff96\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96" +
    "\103\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\111" +
    "\uff96\001\002\000\006\062\uff92\071\uff92\001\002\000\004" +
    "\071\u012e\001\002\000\126\004\uff94\011\uff94\012\uff94\014" +
    "\uff94\015\uff94\017\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\032\uff94\034\uff94\035\uff94\036\uff94\042\uff94\043" +
    "\uff94\045\uff94\047\uff94\052\uff94\053\uff94\056\uff94\057\uff94" +
    "\060\uff94\063\uff94\064\uff94\065\uff94\067\uff94\072\uff94\074" +
    "\uff94\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\103\uff94" +
    "\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94\001" +
    "\002\000\126\004\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b" +
    "\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\032" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\042\uff9b\043\uff9b\045\uff9b" +
    "\047\uff9b\052\uff9b\053\uff9b\056\uff9b\057\uff9b\060\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\067\uff9b\072\uff9b\074\uff9b\075\uff9b" +
    "\076\uff9b\077\uff9b\100\uff9b\101\uff9b\103\uff9b\104\uff9b\105" +
    "\uff9b\106\uff9b\107\uff9b\110\uff9b\111\uff9b\001\002\000\004" +
    "\045\uff9e\001\002\000\004\045\371\001\002\000\126\004" +
    "\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d\017\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\032\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\042\uff9d\043\uff9d\045\uff9d\047\uff9d\052\uff9d" +
    "\053\uff9d\056\uff9d\057\uff9d\060\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\067\uff9d\072\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107" +
    "\uff9d\110\uff9d\111\uff9d\001\002\000\010\046\066\074\062" +
    "\111\uffd3\001\002\000\004\016\u0135\001\002\000\020\011" +
    "\035\014\032\025\027\035\036\043\040\102\044\110\033" +
    "\001\002\000\004\111\u0137\001\002\000\004\047\uffe4\001" +
    "\002\000\004\047\u0139\001\002\000\022\011\035\014\032" +
    "\025\027\035\036\036\034\043\040\070\uffb4\110\033\001" +
    "\002\000\004\070\u013b\001\002\000\004\071\uffe3\001\002" +
    "\000\004\071\u013d\001\002\000\040\002\uffe2\011\uffe2\014" +
    "\uffe2\021\uffe2\025\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\043\uffe2\075\uffe2\076\uffe2\100\uffe2\103\uffe2\110\uffe2\001" +
    "\002\000\006\020\340\071\u013f\001\002\000\040\002\ufff4" +
    "\011\ufff4\014\ufff4\021\ufff4\025\ufff4\033\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\043\ufff4\075\ufff4\076\ufff4\100\ufff4\103\ufff4" +
    "\110\ufff4\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013e\000\006\003\003\114\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\014\007\016\010\005" +
    "\011\020\012\012\013\022\014\015\051\011\001\001\000" +
    "\002\001\001\000\014\070\025\074\027\075\244\077\u0132" +
    "\101\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\070\025\074\027\075\244\077\243\101\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\242\007\016" +
    "\010\005\011\020\012\012\013\022\014\015\051\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\070\025\074\027\075\030\076\024\101\036\001" +
    "\001\000\004\104\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\067\043\063\102" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\070\025\074\027\075\041" +
    "\100\042\101\036\001\001\000\010\042\062\043\063\044" +
    "\060\001\001\000\004\050\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\070\025\072" +
    "\051\074\027\075\030\076\047\101\036\107\052\110\050" +
    "\001\001\000\004\050\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\070\025\072\055\074\027\075\030\076\047\101\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\047\121" +
    "\052\124\053\115\054\106\055\105\056\104\057\103\060" +
    "\100\061\075\062\074\063\072\064\070\065\071\066\077" +
    "\067\076\073\101\001\001\000\002\001\001\000\004\043" +
    "\064\001\001\000\004\046\206\001\001\000\002\001\001" +
    "\000\004\045\201\001\001\000\002\001\001\000\004\040" +
    "\174\001\001\000\004\037\165\001\001\000\002\001\001" +
    "\000\004\047\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\121\052\124\065\151\066\077\067\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\047\121\052\124\065\143\066\077\067" +
    "\076\001\001\000\014\047\121\052\124\065\142\066\077" +
    "\067\076\001\001\000\052\047\121\052\124\053\135\054" +
    "\106\055\105\056\104\057\103\060\100\061\075\062\074" +
    "\063\072\064\070\065\071\066\077\067\076\070\025\074" +
    "\027\075\030\076\136\101\036\001\001\000\002\001\001" +
    "\000\014\047\121\052\124\065\134\066\077\067\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\047\121\052\124\065\132\066" +
    "\077\067\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\121\052\124\065\140\066\077\067\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\047\121\052\124\065\145\066\077" +
    "\067\076\070\025\074\027\075\030\076\146\101\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\047\121\052" +
    "\124\055\154\056\104\057\103\060\100\061\075\062\074" +
    "\063\072\064\070\065\153\066\077\067\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\047\121\052\124" +
    "\056\156\057\103\060\100\061\075\062\074\063\072\064" +
    "\070\065\153\066\077\067\076\001\001\000\002\001\001" +
    "\000\030\047\121\052\124\057\160\060\100\061\075\062" +
    "\074\063\072\064\070\065\153\066\077\067\076\001\001" +
    "\000\002\001\001\000\026\047\121\052\124\060\162\061" +
    "\075\062\074\063\072\064\070\065\153\066\077\067\076" +
    "\001\001\000\002\001\001\000\024\047\121\052\124\061" +
    "\164\062\074\063\072\064\070\065\153\066\077\067\076" +
    "\001\001\000\004\037\165\001\001\000\022\047\121\052" +
    "\124\062\170\063\072\064\070\065\153\066\077\067\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\047\121\052\124\063\176\064\070\065" +
    "\153\066\077\067\076\001\001\000\002\001\001\000\004" +
    "\045\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\047\121\052\124\064\202\065\153\066\077\067\076" +
    "\001\001\000\004\046\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\047\121\052\124" +
    "\065\207\066\077\067\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\047\121\052\124\053\226\054\106" +
    "\055\105\056\104\057\103\060\100\061\075\062\074\063" +
    "\072\064\070\065\071\066\077\067\076\001\001\000\044" +
    "\047\121\052\124\053\220\054\106\055\105\056\104\057" +
    "\103\060\100\061\075\062\074\063\072\064\070\065\071" +
    "\066\077\067\076\111\222\112\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\047\121\052\124" +
    "\053\225\054\106\055\105\056\104\057\103\060\100\061" +
    "\075\062\074\063\072\064\070\065\071\066\077\067\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\047\121\052\124\053\231\054\106\055\105" +
    "\056\104\057\103\060\100\061\075\062\074\063\072\064" +
    "\070\065\071\066\077\067\076\001\001\000\002\001\001" +
    "\000\036\047\121\052\124\054\233\055\105\056\104\057" +
    "\103\060\100\061\075\062\074\063\072\064\070\065\153" +
    "\066\077\067\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\042\067\043\063\102\303\105\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\070" +
    "\025\074\027\075\244\077\250\101\036\001\001\000\012" +
    "\042\067\043\063\102\256\106\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\047\121\052\124\053\254" +
    "\054\106\055\105\056\104\057\103\060\100\061\075\062" +
    "\074\063\072\064\070\065\071\066\077\067\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\067\043\063\102\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\047\121\052\124\053\115\054\106\055\105\056\104" +
    "\057\103\060\100\061\075\062\074\063\072\064\070\065" +
    "\071\066\077\067\076\073\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\047\121\052\124\053\115\054" +
    "\106\055\105\056\104\057\103\060\100\061\075\062\074" +
    "\063\072\064\070\065\071\066\077\067\076\073\270\001" +
    "\001\000\002\001\001\000\014\070\025\074\027\075\041" +
    "\100\272\101\036\001\001\000\004\050\273\001\001\000" +
    "\002\001\001\000\022\070\025\072\051\074\027\075\030" +
    "\076\047\101\036\107\275\110\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\047\121" +
    "\052\124\053\301\054\106\055\105\056\104\057\103\060" +
    "\100\061\075\062\074\063\072\064\070\065\071\066\077" +
    "\067\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\067\043\063" +
    "\102\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\311\001\001\000\002\001\001\000\040\047\121" +
    "\052\124\053\313\054\106\055\105\056\104\057\103\060" +
    "\100\061\075\062\074\063\072\064\070\065\071\066\077" +
    "\067\076\001\001\000\002\001\001\000\042\041\316\047" +
    "\121\052\124\053\315\054\106\055\105\056\104\057\103" +
    "\060\100\061\075\062\074\063\072\064\070\065\071\066" +
    "\077\067\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\047\121\052\124\053\321\054" +
    "\106\055\105\056\104\057\103\060\100\061\075\062\074" +
    "\063\072\064\070\065\071\066\077\067\076\001\001\000" +
    "\002\001\001\000\004\071\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\326\001\001\000\020\015" +
    "\330\070\025\074\027\075\244\077\327\101\036\113\331" +
    "\001\001\000\012\042\067\043\063\102\335\103\336\001" +
    "\001\000\016\070\025\074\027\075\244\077\327\101\036" +
    "\113\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\067\043\063\102\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\070\025\074\027\075\041\100\345\101" +
    "\036\001\001\000\004\050\346\001\001\000\002\001\001" +
    "\000\004\116\350\001\001\000\002\001\001\000\022\070" +
    "\025\072\051\074\027\075\030\076\047\101\036\107\352" +
    "\110\050\001\001\000\002\001\001\000\004\117\354\001" +
    "\001\000\002\001\001\000\104\012\u0103\013\u0106\014\377" +
    "\016\u0101\017\372\020\u0104\021\374\022\376\024\367\025" +
    "\u010a\026\u0107\027\356\030\357\031\364\032\366\033\373" +
    "\034\u0108\047\121\051\011\052\124\053\u0100\054\106\055" +
    "\105\056\104\057\103\060\100\061\075\062\074\063\072" +
    "\064\070\065\071\066\077\067\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\047\121\052\124\053\u012f" +
    "\054\106\055\105\056\104\057\103\060\100\061\075\062" +
    "\074\063\072\064\070\065\071\066\077\067\076\001\001" +
    "\000\002\001\001\000\014\047\121\052\124\065\u012c\066" +
    "\077\067\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\047\121\052\124\053\u0121\054\106\055\105\056" +
    "\104\057\103\060\100\061\075\062\074\063\072\064\070" +
    "\065\071\066\077\067\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\122\u011d\001\001\000\014\047\121" +
    "\052\124\065\u011b\066\077\067\076\001\001\000\100\012" +
    "\u0103\013\u0106\014\377\020\u011a\021\374\022\376\024\367" +
    "\025\u010a\026\u0107\027\356\030\357\031\364\032\366\033" +
    "\373\034\u0108\047\121\051\011\052\124\053\u0100\054\106" +
    "\055\105\056\104\057\103\060\100\061\075\062\074\063" +
    "\072\064\070\065\071\066\077\067\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\047\121\052\124\053\u010b\054\106\055" +
    "\105\056\104\057\103\060\100\061\075\062\074\063\072" +
    "\064\070\065\071\066\077\067\076\001\001\000\002\001" +
    "\001\000\004\021\u010c\001\001\000\004\023\u010d\001\001" +
    "\000\002\001\001\000\004\021\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\047\121\052\124\053\u0112" +
    "\054\106\055\105\056\104\057\103\060\100\061\075\062" +
    "\074\063\072\064\070\065\071\066\077\067\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\047\121\052\124" +
    "\065\u0118\066\077\067\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\012\u0103\013\u0106\014\377\016\u011e\017" +
    "\372\020\u0104\021\374\022\376\024\367\025\u010a\026\u0107" +
    "\027\356\030\357\031\364\032\366\033\373\034\u0108\047" +
    "\121\051\011\052\124\053\u0100\054\106\055\105\056\104" +
    "\057\103\060\100\061\075\062\074\063\072\064\070\065" +
    "\071\066\077\067\076\001\001\000\004\123\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\035\u0125\036\u0126" +
    "\047\121\052\124\053\u0128\054\106\055\105\056\104\057" +
    "\103\060\100\061\075\062\074\063\072\064\070\065\071" +
    "\066\077\067\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\036\u012b" +
    "\047\121\052\124\053\u0128\054\106\055\105\056\104\057" +
    "\103\060\100\061\075\062\074\063\072\064\070\065\071" +
    "\066\077\067\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\u0130\001\001\000\004\021\u0131\001\001\000" +
    "\002\001\001\000\012\042\067\043\063\102\335\103\u013d" +
    "\001\001\000\002\001\001\000\014\070\025\074\027\075" +
    "\041\100\u0135\101\036\001\001\000\002\001\001\000\004" +
    "\120\u0137\001\001\000\002\001\001\000\022\070\025\072" +
    "\051\074\027\075\030\076\047\101\036\107\u0139\110\050" +
    "\001\001\000\002\001\001\000\004\121\u013b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // QualIdent ::= T_ID_U 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       //Return a typedefSTO
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*QualIdent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_Global_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("nullptr");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        ConstSTO s = new ConstSTO ("false", new BoolType("bool",4));
                        s.setValue(0);
                        RESULT = s;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        ConstSTO s = new ConstSTO ("true", new BoolType("bool",4));
                        s.setValue(1.0);
                        RESULT = s;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator3 ::= T_CHAR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO s = new ConstSTO (_1, new FloatType("float", 4));
                        s.setValue(Double.parseDouble(_1));
                        RESULT = s;
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO s = new ConstSTO(_1,new IntType("int",4));
                        int value = Integer.decode(_1);
                        s.setValue(value);
                        RESULT = s;
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //Do function call check #5
                        //OptExprList containing all the parameters
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if(_2.equals("++"))
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new IncOp());
                        else
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new DecOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //Check#11
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
            if(_1.equals("++"))
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new IncOp());
			else
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new DecOp());
        
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator ::= T_LPAREN Type T_RPAREN Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Designator ::= T_SIZEOF T_LPAREN Type T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new ConstSTO("sizeof type - fix me");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new ConstSTO("sizeof variable - fix me");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            RESULT = ((MyParser) parser).DoUnaryExpr(_1, new NotOp());
        
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            if(_2.equals("+"))
			  RESULT = _1;
			else{
			  if(_1 instanceof ConstSTO){
			    ((ConstSTO)_1).setValue(-(((ConstSTO)_1).getFloatValue()));
			    RESULT = _1;
			  }else if(_1 instanceof VarSTO){
			    ((VarSTO)_1).setNegative(true);
			    RESULT = _1;
			  }

			}
        
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            //Argument pass by reference
			RESULT = _1;
        
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Relation ::= T_GTE 
            {
              Object RESULT = null;
		
                        RESULT = ">=";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Relation ::= T_LTE 
            {
              Object RESULT = null;
		
                        RESULT = "<=";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Relation ::= T_GT 
            {
              Object RESULT = null;
		
                        RESULT = ">";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Relation ::= T_LT 
            {
              Object RESULT = null;
		
						RESULT = "<";
					
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // UnarySign ::= T_MINUS 
            {
              String RESULT = null;
		
				  RESULT = "-";
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // UnarySign ::= T_PLUS 
            {
              String RESULT = null;
		
				  RESULT = "+";
				
              CUP$parser$result = new java_cup.runtime.Symbol(40/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Equality ::= T_NEQ 
            {
              Object RESULT = null;
		
    				RESULT = "!=";
    			
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Equality ::= T_EQU 
            {
              Object RESULT = null;
		
					RESULT = "==";
				
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //Check #1
                        if(_2.equals("*"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1,new MulOp(), _3);
                        else if(_2.equals("/"))
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new DivOp(),_3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new ModOp(),_3); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //Check #1
                        if(_2.equals("+"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AddOp(), _3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new MinusOp(),_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //check #0
                    	if(_2.equals("<"))
                    	  RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessThanOp(), _3);
                        else if (_2.equals("<="))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessAndEqualThanOp(), _3);
                        else if(_2.equals(">"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterThanOp(), _3);
                        else
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterAndEqualThanOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if(_2.equals("=="))
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new EqualOp(), _3);
                        else
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new NotEqualOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwAndOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwXorOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwOrOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AndOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new OrOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			   _1.addElement(_2);
    			   RESULT = _1;
    			 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				   Vector<STO> v = new Vector<STO>();
				   v.addElement(_1);
				   RESULT = v;
				 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptExprList ::= 
            {
              Vector RESULT = null;
		
    				  RESULT = new Vector<Type>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = _1; 
                 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WritePair ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // WritePairList ::= WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NewStmt ::= T_NEW Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
         	       ((MyParser)parser).DoReturnCheck(_1); 
         	     
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
  				   //((MyParser) parser).DoReturnCheck(new VoidType("void",4));
  				   ((MyParser) parser).DoReturnCheck(new ExprSTO("void",new VoidType("void",4)));
  				 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       //DoExitStmtCheck if Expr is assignable to an int
                       ((MyParser) parser).DoExitStmtCheck(_1); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(21/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		 
                      //Check illegal continue statement
                      //continue statement should be inside the while loop
                      ((MyParser) parser).DoContinueStmtCheck(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                     //Check illegal break statement
                     //break statement should be inside the while loop
                      ((MyParser) parser).DoBreakStmtCheck(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WhileStmt ::= T_WHILE Expr NT$8 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					  RESULT = ((MyParser) parser).DoIfWhileExpr(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(18/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					  //Set inwhile to be true if it was false, increment the while level
					  ((MyParser)parser).DoWhileStmt();
					
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IfStmt ::= T_IF Expr CodeBlock OptElse 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					  RESULT = ((MyParser) parser).DoIfWhileExpr(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(16/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ArrElemsList ::= ArrElemsList T_COMMA Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ArrElemsList ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OptInit ::= T_ASSIGN T_LBRACE ArrElemsList T_RBRACE 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(55/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IdListWInit ::= IdListWInit T_COMMA OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
			RESULT.addElement (_3);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IdListWInit ::= OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      VarSTO v = new VarSTO(_1);
                      v.setInit(_2);
                      v.setStatic(false);
			          RESULT = new Vector ();
			          RESULT.addElement (v);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IdListWOptInit ::= IdListWOptInit T_COMMA OptModifiers T_ID OptInit 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 instanceof ErrorSTO)
                          RESULT = new Vector();
                        else{
	                        RESULT = _1;
	                        VarSTO v = new VarSTO(_3);
	                        v.setInit(_2);
	                        v.setStatic(false);
	                        //If there's modifier
	                        if(_4 != null)
		                        v.setType(_4);
	                        RESULT.addElement (v);
	                    }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IdListWOptInit ::= OptModifiers T_ID OptInit 
            {
              Vector RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _3 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 != null)
                        {
                          if(_2.isError())
                            RESULT = new Vector();
                          else{
	                        //Check if the OptInit is known at compile time
	                        VarSTO v = new VarSTO(_1);
	                        v.setInit(_2);
	                        v.setStatic(false);
	                        if(_3 != null)
	                          v.setType(_3);	                      
	                        RESULT = new Vector();
	                        RESULT.addElement (v);
	                      }
	                    }
	                    //No init applied
	                    else{
	                      VarSTO v = new VarSTO(_1);
	                      v.setStatic(false);
	                      if(_3 != null)
	                        v.setType(_3);	                      
	                      RESULT = new Vector();
	                      RESULT.addElement (v);
	                    }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdListUpper ::= IdListUpper T_COMMA T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdListUpper ::= T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdList ::= IdList T_COMMA OptModifiers T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        VarSTO v = new VarSTO(_3);
                        if(_2 != null){
                          if(_2.isError()){
                            //Return an empty vector to indicate an error
                            RESULT = new Vector();
                          }
                          else{
                            v.setType(_2);
                            RESULT.addElement(v);
                          }
                        }
                        //No optional modifiers
                        else{
                          //Return an vector of VarSTO
                          RESULT.addElement (v);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IdList ::= OptModifiers T_ID 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        VarSTO v = new VarSTO(_1);
                        if(_2 != null){
                          if(_2.isError()){
                            //Return an empty vector to indicate an error
                            RESULT = new Vector();
                          }
                          else{
                            //Composite type
                            v.setType(_2);
                            RESULT = new Vector();
                            RESULT.addElement(v);
                          }
                        }
                        //No optional modifiers
                        else{
                          //Return an vector of VarSTO
                          RESULT = new Vector ();
                          RESULT.addElement (v);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptRef ::= 
            {
              String RESULT = null;
		 //Here is parameter pass by value
    				 	RESULT ="";		
					 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptRef ::= T_AMPERSAND 
            {
              String RESULT = null;
		 //Here is parameter pass by reference
					   RESULT = "&";
					 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ParamDecl ::= Type OptRef T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  //Check #5 parameter type check, return the type's name
					  //if OptRef is a reference
					  if(_3.equals("&")){
					    _1.setReference(true);
					    RESULT = new VarSTO(_2, _1);
					  }
					  else
					    RESULT = new VarSTO(_2, _1);
					  
					
              CUP$parser$result = new java_cup.runtime.Symbol(56/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				  //Return the vector with the _2 add to the back
    				  _1.addElement(_2);
    				  RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  //Return the vector of parameter types
					  Vector<STO> v = new Vector<STO>();
					  v.addElement(_1);
					  RESULT = v;
					
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptParamList ::= 
            {
              Vector RESULT = null;
		
    				  RESULT = new Vector<STO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  //Return a list of parameter
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CodeBlock ::= T_LBRACE NT$6 OptStmtList NT$7 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Object RESULT = null;
 
		              ((MyParser) parser).DoBlockClose();     
		            
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$6 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
    				  RESULT = new VoidType("void", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(62/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ReturnType ::= SubType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        // You should determine the type and return it here
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Pointer ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PointerList ::= PointerList Pointer 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PointerList ::= Pointer 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OptPointerList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptPointerList ::= PointerList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptModifiers ::= 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptModifiers ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					  //Modifier for array type
					  //Check #10, illegal array declaration
					  RESULT = ((MyParser) parser).DoArrayDeclCheck(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptModifiers ::= PointerList 
            {
              Type RESULT = null;
		
					  RESULT = new PointerType("pointer", 4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BasicType ::= T_CHAR 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
    				  RESULT = new BoolType("bool", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(58/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
    				  RESULT = new FloatType("float", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(58/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
					  RESULT = new IntType("int", 4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(58/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DeclareType ::= T_DECLTYPE T_LPAREN Expr0 T_RPAREN 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				    Type t = _1.getType();				    
				    t.setName(_1.getType().getName());
				    RESULT = t;
				     
				 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*DeclareType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SubType ::= DeclareType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				  //Add for check#3c decltype keyword
    				  RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(59/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SubType ::= BasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				  RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(59/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SubType ::= QualIdent 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			     //Get the basic type out of TypedefSTO
			     //modifiy the previous type and set its name to be the correct typedef ID
			     Type t = _1.getType().clone();
			     t.setName(_1.getName());
			     RESULT = t;
			   
              CUP$parser$result = new java_cup.runtime.Symbol(59/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UndecoratedType ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UndecoratedType ::= SubType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(61/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= SubType OptModifiers 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				   //If there's modifiers
				   if(_2 != null){
				     if(_2 instanceof ErrorType){
				       RESULT = _2;
				     }
				     else{
				       ((CompositeType)_2).setElementType(_1);
				       RESULT = _2;
				     }
				   }
				   else{
				     RESULT = _1;
				   }
				 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$4 T_LPAREN OptParamList T_RPAREN NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$2 T_LPAREN OptParamList T_RPAREN NT$3 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    	//Close scope 
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
						if(_4.equals("&"))
						  _1.setReference(true);
                        ((MyParser) parser).DoFuncDecl_1(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldList ::= UndecoratedType IdList T_SEMI 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				     //Vector of 0 size, error
				     if(_2.size() == 0){
				       RESULT = _2;
				     }
				     Vector<VarSTO> v = new Vector<VarSTO>();
				     for(int i = 0; i < _2.size(); i++){
				       VarSTO tmp = (VarSTO)_2.elementAt(i);
				       //If the type is not set
				       if(tmp.getType() == null){
				         tmp.setType(_1);
				       }
				       else{
				         ((CompositeType)(tmp.getType())).setElementType(_1);
				       }
				       v.addElement(tmp);
				     }
				     RESULT = v;
				  
              CUP$parser$result = new java_cup.runtime.Symbol(73/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldsList ::= FieldsList FieldList 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			   ((MyParser) parser).DoStructFieldDecl(_2);
    			 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldsList ::= FieldList 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				   ((MyParser) parser).DoStructFieldDecl(_1);
				 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypedefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$1 FieldsList T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                         //Get the vector of locals from the current scope, which is the fields of the struct
                         ((MyParser) parser).DoBlockClose();
                         ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypedefDecl ::= T_TYPEDEF Type IdListUpper T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //insert TypeDef STO into the symbol table
                        ((MyParser) parser).DoTypedefDecl (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OptStatic ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OptStatic ::= T_STATIC 
            {
              String RESULT = null;
		
				  RESULT = "static";
				
              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= OptStatic T_CONST UndecoratedType IdListWInit T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       //If the static keyword is provided
                       if(_1 != null){
                         Vector<VarSTO> v = new Vector<VarSTO>();
                         for(int i = 0; i < _3.size(); i++){
                           VarSTO s = (VarSTO)_3.elementAt(i);
                           s.setStatic(true);
                           s.setType(_2);
                           v.addElement(s);
                         }
                         ((MyParser) parser).DoConstDecl (v, _2);
                       }
                       else{
                         ((MyParser) parser).DoConstDecl (_3, _2);
                       }
                   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= OptStatic UndecoratedType IdListWOptInit T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         //If error occured, which return a empty vector
                         if(_3.size() == 0){
                         }
                         else{
	                         //If the static keyword is provided
	                         if(_1 != null){
	                           Vector<VarSTO> v = new Vector<VarSTO>();
	                           for(int i = 0; i < _3.size(); i++){
	                             VarSTO s = (VarSTO)_3.elementAt(i);
	                             s.setStatic(true);
	                             s.setType(_2);
	                             v.addElement(s);
	                           }
	                           ((MyParser) parser).DoVarDecl (v,_2);
	                         }
	                         else{
	                            ((MyParser) parser).DoVarDecl (_3,_2);
	                         }
	                     }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExternDecl ::= T_EXTERN UndecoratedType IdList T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       ((MyParser) parser).DoProgramEnd();
               
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoProgramStart(); 
               
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

