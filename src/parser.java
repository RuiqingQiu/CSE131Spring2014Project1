
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Wed Apr 09 19:37:57 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Wed Apr 09 19:37:57 PDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\113\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\006\000\002\012\006\000\002\012" +
    "\010\000\002\013\007\000\002\013\011\000\002\014\003" +
    "\000\002\014\002\000\002\015\006\000\002\114\002\000" +
    "\002\015\011\000\002\017\003\000\002\017\004\000\002" +
    "\020\005\000\002\115\002\000\002\116\002\000\002\007" +
    "\017\000\002\117\002\000\002\120\002\000\002\010\015" +
    "\000\002\102\004\000\002\102\011\000\002\103\003\000" +
    "\002\103\011\000\002\101\003\000\002\101\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\052\003\000\002\052\005\000\002\052\002" +
    "\000\002\055\003\000\002\055\002\000\002\053\003\000" +
    "\002\053\004\000\002\054\003\000\002\104\004\000\002" +
    "\104\003\000\002\121\002\000\002\122\002\000\002\024" +
    "\007\000\002\021\003\000\002\021\002\000\002\022\003" +
    "\000\002\022\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\111\003\000\002\111\002\000\002\112\003\000\002" +
    "\112\005\000\002\061\005\000\002\016\003\000\002\016" +
    "\002\000\002\105\004\000\002\105\006\000\002\106\003" +
    "\000\002\106\005\000\002\107\005\000\002\107\007\000" +
    "\002\110\006\000\002\110\010\000\002\050\004\000\002" +
    "\050\006\000\002\050\002\000\002\051\003\000\002\051" +
    "\005\000\002\026\006\000\002\027\004\000\002\027\002" +
    "\000\002\030\005\000\002\031\004\000\002\032\004\000" +
    "\002\033\007\000\002\034\004\000\002\034\005\000\002" +
    "\035\006\000\002\036\006\000\002\037\005\000\002\040" +
    "\005\000\002\041\003\000\002\041\005\000\002\042\003" +
    "\000\002\042\003\000\002\043\003\000\002\025\003\000" +
    "\002\025\002\000\002\044\003\000\002\044\005\000\002" +
    "\062\005\000\002\062\003\000\002\063\005\000\002\063" +
    "\003\000\002\064\005\000\002\064\003\000\002\065\005" +
    "\000\002\065\003\000\002\066\005\000\002\066\003\000" +
    "\002\067\005\000\002\067\003\000\002\070\005\000\002" +
    "\070\003\000\002\071\005\000\002\071\003\000\002\072" +
    "\005\000\002\072\003\000\002\073\005\000\002\073\003" +
    "\000\002\046\003\000\002\046\003\000\002\045\003\000" +
    "\002\045\003\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\056\003\000\002\056" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\074\004\000" +
    "\002\074\004\000\002\074\004\000\002\074\004\000\002" +
    "\074\006\000\002\074\006\000\002\074\006\000\002\074" +
    "\004\000\002\074\003\000\002\075\005\000\002\075\006" +
    "\000\002\075\005\000\002\075\004\000\002\075\006\000" +
    "\002\075\003\000\002\076\005\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\004" +
    "\000\002\076\003\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\036\002\001\011\001\014\001\021\001\032" +
    "\001\034\001\035\001\036\001\042\001\074\001\075\001" +
    "\077\001\102\001\107\001\001\002\000\004\002\u013a\001" +
    "\002\000\036\002\ufffd\011\uffee\014\uffee\021\uffee\032\007" +
    "\034\uffee\035\uffee\036\010\042\uffee\074\014\075\011\077" +
    "\024\102\uffee\107\uffee\001\002\000\036\002\ufff6\011\ufff6" +
    "\014\ufff6\021\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\042" +
    "\ufff6\074\ufff6\075\ufff6\077\ufff6\102\ufff6\107\ufff6\001\002" +
    "\000\020\011\034\014\031\034\035\035\242\036\u012e\042" +
    "\036\107\032\001\002\000\004\016\340\001\002\000\004" +
    "\107\320\001\002\000\022\011\034\014\031\021\243\034" +
    "\035\035\242\042\036\102\241\107\032\001\002\000\036" +
    "\002\ufff9\011\ufff9\014\ufff9\021\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\042\ufff9\074\ufff9\075\ufff9\077\ufff9\102\ufff9" +
    "\107\ufff9\001\002\000\022\011\uffef\014\uffef\021\uffef\034" +
    "\uffef\035\uffef\042\uffef\102\uffef\107\uffef\001\002\000\036" +
    "\002\ufffc\011\ufffc\014\ufffc\021\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\042\ufffc\074\ufffc\075\ufffc\077\ufffc\102\ufffc" +
    "\107\ufffc\001\002\000\036\002\ufff7\011\ufff7\014\ufff7\021" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\042\ufff7\074\ufff7" +
    "\075\ufff7\077\ufff7\102\ufff7\107\ufff7\001\002\000\036\002" +
    "\ufff5\011\ufff5\014\ufff5\021\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\042\ufff5\074\ufff5\075\ufff5\077\ufff5\102\ufff5\107" +
    "\ufff5\001\002\000\036\002\ufffe\011\uffee\014\uffee\021\uffee" +
    "\032\007\034\uffee\035\uffee\036\010\042\uffee\074\014\075" +
    "\011\077\024\102\uffee\107\uffee\001\002\000\036\002\ufffa" +
    "\011\ufffa\014\ufffa\021\ufffa\032\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\042\ufffa\074\ufffa\075\ufffa\077\ufffa\102\ufffa\107\ufffa" +
    "\001\002\000\004\002\000\001\002\000\036\002\ufff8\011" +
    "\ufff8\014\ufff8\021\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\042\ufff8\074\ufff8\075\ufff8\077\ufff8\102\ufff8\107\ufff8\001" +
    "\002\000\016\011\034\014\031\034\035\035\033\042\036" +
    "\107\032\001\002\000\004\107\231\001\002\000\020\004" +
    "\uffdd\045\uffdd\046\uffdd\067\uffdd\073\uffdd\107\uffdd\110\uffdd" +
    "\001\002\000\020\004\uffdc\045\uffdc\046\uffdc\067\uffdc\073" +
    "\uffdc\107\uffdc\110\uffdc\001\002\000\016\004\uffd5\045\064" +
    "\067\uffd5\073\060\107\uffd5\110\uffd5\001\002\000\020\004" +
    "\uffd8\045\uffd8\046\uffd8\067\uffd8\073\uffd8\107\uffd8\110\uffd8" +
    "\001\002\000\020\004\uff51\045\uff51\046\uff51\067\uff51\073" +
    "\uff51\107\uff51\110\uff51\001\002\000\004\016\037\001\002" +
    "\000\020\004\uffd9\045\uffd9\046\uffd9\067\uffd9\073\uffd9\107" +
    "\uffd9\110\uffd9\001\002\000\020\004\uffda\045\uffda\046\uffda" +
    "\067\uffda\073\uffda\107\uffda\110\uffda\001\002\000\020\004" +
    "\uffdb\045\uffdb\046\uffdb\067\uffdb\073\uffdb\107\uffdb\110\uffdb" +
    "\001\002\000\016\011\034\014\031\034\035\042\036\101" +
    "\042\107\032\001\002\000\012\004\uffd3\046\uffd3\073\060" +
    "\110\uffd3\001\002\000\006\004\043\046\uffb1\001\002\000" +
    "\010\004\uffce\046\uffce\110\uffce\001\002\000\006\046\uffb2" +
    "\110\uffb2\001\002\000\004\046\045\001\002\000\020\011" +
    "\034\014\031\034\035\035\033\042\036\067\uffb6\107\032" +
    "\001\002\000\006\004\043\110\uffb1\001\002\000\006\020" +
    "\053\067\uffb7\001\002\000\006\020\uffb5\067\uffb5\001\002" +
    "\000\004\067\052\001\002\000\012\004\uffe0\067\uffe0\107" +
    "\uffe0\110\uffe0\001\002\000\016\011\034\014\031\034\035" +
    "\035\033\042\036\107\032\001\002\000\006\020\uffb4\067" +
    "\uffb4\001\002\000\004\110\056\001\002\000\006\020\uffb3" +
    "\067\uffb3\001\002\000\010\004\uffcf\046\uffcf\110\uffcf\001" +
    "\002\000\016\004\uffd0\046\uffd0\067\uffd0\073\uffd0\107\uffd0" +
    "\110\uffd0\001\002\000\012\004\uffd4\046\uffd4\073\060\110" +
    "\uffd4\001\002\000\016\004\uffd2\046\uffd2\067\uffd2\073\uffd2" +
    "\107\uffd2\110\uffd2\001\002\000\016\004\uffd1\046\uffd1\067" +
    "\uffd1\073\uffd1\107\uffd1\110\uffd1\001\002\000\046\004\117" +
    "\017\127\033\113\046\121\051\112\052\122\056\107\057" +
    "\126\062\124\063\111\071\115\073\130\076\100\103\106" +
    "\104\125\105\110\106\072\110\116\001\002\000\012\004" +
    "\uffe1\067\uffe1\107\uffe1\110\uffe1\001\002\000\014\004\uffd7" +
    "\067\uffd7\073\060\107\uffd7\110\uffd7\001\002\000\062\004" +
    "\uff7a\005\uff7a\007\227\010\uff7a\013\uff7a\020\uff7a\030\uff7a" +
    "\037\uff7a\040\uff7a\044\uff7a\047\uff7a\050\uff7a\051\uff7a\053" +
    "\uff7a\054\uff7a\060\uff7a\061\uff7a\062\uff7a\064\uff7a\065\uff7a" +
    "\067\uff7a\070\uff7a\072\uff7a\073\uff7a\001\002\000\060\004" +
    "\uff7c\005\uff7c\010\uff7c\013\uff7c\020\uff7c\030\uff7c\037\uff7c" +
    "\040\uff7c\044\uff7c\047\uff7c\050\uff7c\051\uff7c\053\202\054" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\064\uff7c\065\uff7c\067\uff7c" +
    "\070\uff7c\072\204\073\203\001\002\000\052\004\uff7e\005" +
    "\uff7e\010\uff7e\013\uff7e\020\uff7e\030\uff7e\037\uff7e\040\uff7e" +
    "\044\uff7e\047\uff7e\050\uff7e\051\177\054\uff7e\060\uff7e\061" +
    "\uff7e\062\176\064\uff7e\065\uff7e\067\uff7e\070\uff7e\001\002" +
    "\000\076\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\013" +
    "\uff57\020\uff57\025\uff57\030\uff57\037\uff57\040\uff57\044\uff57" +
    "\045\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053" +
    "\uff57\054\uff57\060\uff57\061\uff57\062\uff57\063\uff57\064\uff57" +
    "\065\uff57\067\uff57\070\uff57\072\uff57\073\uff57\001\002\000" +
    "\046\004\uff80\005\uff80\010\uff80\013\uff80\020\uff80\030\uff80" +
    "\037\174\040\170\044\uff80\047\173\050\171\054\uff80\060" +
    "\uff80\061\uff80\064\uff80\065\uff80\067\uff80\070\uff80\001\002" +
    "\000\076\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\013" +
    "\uff5c\020\uff5c\025\uff5c\030\uff5c\037\uff5c\040\uff5c\044\uff5c" +
    "\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c" +
    "\065\uff5c\067\uff5c\070\uff5c\072\uff5c\073\uff5c\001\002\000" +
    "\036\004\uff82\005\uff82\010\uff82\013\uff82\020\uff82\030\166" +
    "\044\uff82\054\165\060\uff82\061\uff82\064\uff82\065\uff82\067" +
    "\uff82\070\uff82\001\002\000\032\004\162\005\uff84\010\uff84" +
    "\013\uff84\020\uff84\044\uff84\060\uff84\061\uff84\064\uff84\065" +
    "\uff84\067\uff84\070\uff84\001\002\000\076\004\uff62\005\uff62" +
    "\006\213\007\uff62\010\uff62\013\uff62\020\uff62\025\214\030" +
    "\uff62\037\uff62\040\uff62\044\uff62\045\210\046\211\047\uff62" +
    "\050\uff62\051\uff62\052\122\053\uff62\054\uff62\060\uff62\061" +
    "\uff62\062\uff62\063\111\064\uff62\065\uff62\067\uff62\070\uff62" +
    "\072\uff62\073\uff62\001\002\000\076\004\uff56\005\uff56\006" +
    "\uff56\007\uff56\010\uff56\013\uff56\020\uff56\025\uff56\030\uff56" +
    "\037\uff56\040\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050" +
    "\uff56\051\uff56\052\uff56\053\uff56\054\uff56\060\uff56\061\uff56" +
    "\062\uff56\063\uff56\064\uff56\065\uff56\067\uff56\070\uff56\072" +
    "\uff56\073\uff56\001\002\000\004\065\207\001\002\000\030" +
    "\005\uff86\010\uff86\013\160\020\uff86\044\uff86\060\uff86\061" +
    "\uff86\064\uff86\065\uff86\067\uff86\070\uff86\001\002\000\026" +
    "\005\uff88\010\156\020\uff88\044\uff88\060\uff88\061\uff88\064" +
    "\uff88\065\uff88\067\uff88\070\uff88\001\002\000\024\005\154" +
    "\020\uff8a\044\uff8a\060\uff8a\061\uff8a\064\uff8a\065\uff8a\067" +
    "\uff8a\070\uff8a\001\002\000\022\020\uff8c\044\uff8c\060\151" +
    "\061\uff8c\064\uff8c\065\uff8c\067\uff8c\070\uff8c\001\002\000" +
    "\076\004\uff58\005\uff58\006\uff58\007\uff58\010\uff58\013\uff58" +
    "\020\uff58\025\uff58\030\uff58\037\uff58\040\uff58\044\uff58\045" +
    "\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58" +
    "\054\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064\uff58\065" +
    "\uff58\067\uff58\070\uff58\072\uff58\073\uff58\001\002\000\046" +
    "\004\117\017\127\033\113\046\121\051\112\052\122\056" +
    "\107\057\126\062\124\063\111\071\115\073\130\076\100" +
    "\103\106\104\125\105\110\106\072\110\116\001\002\000" +
    "\076\004\uff5a\005\uff5a\006\uff5a\007\uff5a\010\uff5a\013\uff5a" +
    "\020\uff5a\025\uff5a\030\uff5a\037\uff5a\040\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a" +
    "\054\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065" +
    "\uff5a\067\uff5a\070\uff5a\072\uff5a\073\uff5a\001\002\000\124" +
    "\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\013\uff6c\017" +
    "\uff6c\020\uff6c\025\uff6c\030\uff6c\033\uff6c\037\uff6c\040\uff6c" +
    "\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052" +
    "\uff6c\053\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c" +
    "\062\uff6c\063\uff6c\064\uff6c\065\uff6c\067\uff6c\070\uff6c\071" +
    "\uff6c\072\uff6c\073\uff6c\076\uff6c\103\uff6c\104\uff6c\105\uff6c" +
    "\106\uff6c\110\uff6c\001\002\000\046\004\uff76\017\uff76\033" +
    "\uff76\046\uff76\051\uff76\052\uff76\056\uff76\057\uff76\062\uff76" +
    "\063\uff76\071\uff76\073\uff76\076\uff76\103\uff76\104\uff76\105" +
    "\uff76\106\uff76\110\uff76\001\002\000\076\004\uff55\005\uff55" +
    "\006\uff55\007\uff55\010\uff55\013\uff55\020\uff55\025\uff55\030" +
    "\uff55\037\uff55\040\uff55\044\uff55\045\uff55\046\uff55\047\uff55" +
    "\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55\060\uff55\061" +
    "\uff55\062\uff55\063\uff55\064\uff55\065\uff55\067\uff55\070\uff55" +
    "\072\uff55\073\uff55\001\002\000\010\020\uff92\065\uff92\070" +
    "\uff92\001\002\000\004\046\143\001\002\000\076\004\uff52" +
    "\005\uff52\006\uff52\007\uff52\010\uff52\013\uff52\020\uff52\025" +
    "\uff52\030\uff52\037\uff52\040\uff52\044\uff52\045\uff52\046\uff52" +
    "\047\uff52\050\uff52\051\uff52\052\uff52\053\uff52\054\uff52\060" +
    "\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\067\uff52" +
    "\070\uff52\072\uff52\073\uff52\001\002\000\046\004\117\017" +
    "\127\033\113\046\121\051\112\052\122\056\107\057\126" +
    "\062\124\063\111\071\115\073\130\076\100\103\106\104" +
    "\125\105\110\106\072\110\116\001\002\000\046\004\117" +
    "\017\127\033\113\046\121\051\112\052\122\056\107\057" +
    "\126\062\124\063\111\071\115\073\130\076\100\103\106" +
    "\104\125\105\110\106\072\110\116\001\002\000\062\004" +
    "\117\011\034\014\031\017\127\033\113\034\035\035\033" +
    "\042\036\046\121\051\112\052\122\056\107\057\126\062" +
    "\124\063\111\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\107\032\110\116\001\002\000\124\004" +
    "\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\013\uff6b\017\uff6b" +
    "\020\uff6b\025\uff6b\030\uff6b\033\uff6b\037\uff6b\040\uff6b\044" +
    "\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062" +
    "\uff6b\063\uff6b\064\uff6b\065\uff6b\067\uff6b\070\uff6b\071\uff6b" +
    "\072\uff6b\073\uff6b\076\uff6b\103\uff6b\104\uff6b\105\uff6b\106" +
    "\uff6b\110\uff6b\001\002\000\046\004\117\017\127\033\113" +
    "\046\121\051\112\052\122\056\107\057\126\062\124\063" +
    "\111\071\115\073\130\076\100\103\106\104\125\105\110" +
    "\106\072\110\116\001\002\000\046\004\uff77\017\uff77\033" +
    "\uff77\046\uff77\051\uff77\052\uff77\056\uff77\057\uff77\062\uff77" +
    "\063\uff77\071\uff77\073\uff77\076\uff77\103\uff77\104\uff77\105" +
    "\uff77\106\uff77\110\uff77\001\002\000\076\004\uff59\005\uff59" +
    "\006\uff59\007\uff59\010\uff59\013\uff59\020\uff59\025\uff59\030" +
    "\uff59\037\uff59\040\uff59\044\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\060\uff59\061" +
    "\uff59\062\uff59\063\uff59\064\uff59\065\uff59\067\uff59\070\uff59" +
    "\072\uff59\073\uff59\001\002\000\076\004\uff54\005\uff54\006" +
    "\uff54\007\uff54\010\uff54\013\uff54\020\uff54\025\uff54\030\uff54" +
    "\037\uff54\040\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\053\uff54\054\uff54\060\uff54\061\uff54" +
    "\062\uff54\063\uff54\064\uff54\065\uff54\067\uff54\070\uff54\072" +
    "\uff54\073\uff54\001\002\000\004\110\132\001\002\000\046" +
    "\004\117\017\127\033\113\046\121\051\112\052\122\056" +
    "\107\057\126\062\124\063\111\071\115\073\130\076\100" +
    "\103\106\104\125\105\110\106\072\110\116\001\002\000" +
    "\062\004\uff6a\005\uff6a\007\uff6a\010\uff6a\013\uff6a\020\uff6a" +
    "\030\uff6a\037\uff6a\040\uff6a\044\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\053\uff6a\054\uff6a\060\uff6a\061\uff6a\062\uff6a\064\uff6a" +
    "\065\uff6a\067\uff6a\070\uff6a\072\uff6a\073\uff6a\001\002\000" +
    "\076\004\uff53\005\uff53\006\uff53\007\uff53\010\uff53\013\uff53" +
    "\020\uff53\025\uff53\030\uff53\037\uff53\040\uff53\044\uff53\045" +
    "\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53" +
    "\054\uff53\060\uff53\061\uff53\062\uff53\063\uff53\064\uff53\065" +
    "\uff53\067\uff53\070\uff53\072\uff53\073\uff53\001\002\000\062" +
    "\004\uff68\005\uff68\007\uff68\010\uff68\013\uff68\020\uff68\030" +
    "\uff68\037\uff68\040\uff68\044\uff68\047\uff68\050\uff68\051\uff68" +
    "\053\uff68\054\uff68\060\uff68\061\uff68\062\uff68\064\uff68\065" +
    "\uff68\067\uff68\070\uff68\072\uff68\073\uff68\001\002\000\004" +
    "\067\140\001\002\000\004\067\136\001\002\000\046\004" +
    "\117\017\127\033\113\046\121\051\112\052\122\056\107" +
    "\057\126\062\124\063\111\071\115\073\130\076\100\103" +
    "\106\104\125\105\110\106\072\110\116\001\002\000\062" +
    "\004\uff64\005\uff64\007\uff64\010\uff64\013\uff64\020\uff64\030" +
    "\uff64\037\uff64\040\uff64\044\uff64\047\uff64\050\uff64\051\uff64" +
    "\053\uff64\054\uff64\060\uff64\061\uff64\062\uff64\064\uff64\065" +
    "\uff64\067\uff64\070\uff64\072\uff64\073\uff64\001\002\000\076" +
    "\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b\013\uff5b\020" +
    "\uff5b\025\uff5b\030\uff5b\037\uff5b\040\uff5b\044\uff5b\045\uff5b" +
    "\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054" +
    "\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b" +
    "\067\uff5b\070\uff5b\072\uff5b\073\uff5b\001\002\000\062\004" +
    "\uff63\005\uff63\007\uff63\010\uff63\013\uff63\020\uff63\030\uff63" +
    "\037\uff63\040\uff63\044\uff63\047\uff63\050\uff63\051\uff63\053" +
    "\uff63\054\uff63\060\uff63\061\uff63\062\uff63\064\uff63\065\uff63" +
    "\067\uff63\070\uff63\072\uff63\073\uff63\001\002\000\062\004" +
    "\uff69\005\uff69\007\uff69\010\uff69\013\uff69\020\uff69\030\uff69" +
    "\037\uff69\040\uff69\044\uff69\047\uff69\050\uff69\051\uff69\053" +
    "\uff69\054\uff69\060\uff69\061\uff69\062\uff69\064\uff69\065\uff69" +
    "\067\uff69\070\uff69\072\uff69\073\uff69\001\002\000\062\004" +
    "\117\011\034\014\031\017\127\033\113\034\035\035\033" +
    "\042\036\046\121\051\112\052\122\056\107\057\126\062" +
    "\124\063\111\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\107\032\110\116\001\002\000\004\067" +
    "\147\001\002\000\004\067\146\001\002\000\062\004\uff65" +
    "\005\uff65\007\uff65\010\uff65\013\uff65\020\uff65\030\uff65\037" +
    "\uff65\040\uff65\044\uff65\047\uff65\050\uff65\051\uff65\053\uff65" +
    "\054\uff65\060\uff65\061\uff65\062\uff65\064\uff65\065\uff65\067" +
    "\uff65\070\uff65\072\uff65\073\uff65\001\002\000\062\004\uff66" +
    "\005\uff66\007\uff66\010\uff66\013\uff66\020\uff66\030\uff66\037" +
    "\uff66\040\uff66\044\uff66\047\uff66\050\uff66\051\uff66\053\uff66" +
    "\054\uff66\060\uff66\061\uff66\062\uff66\064\uff66\065\uff66\067" +
    "\uff66\070\uff66\072\uff66\073\uff66\001\002\000\062\004\uff67" +
    "\005\uff67\007\uff67\010\uff67\013\uff67\020\uff67\030\uff67\037" +
    "\uff67\040\uff67\044\uff67\047\uff67\050\uff67\051\uff67\053\uff67" +
    "\054\uff67\060\uff67\061\uff67\062\uff67\064\uff67\065\uff67\067" +
    "\uff67\070\uff67\072\uff67\073\uff67\001\002\000\046\004\117" +
    "\017\127\033\113\046\121\051\112\052\122\056\107\057" +
    "\126\062\124\063\111\071\115\073\130\076\100\103\106" +
    "\104\125\105\110\106\072\110\116\001\002\000\060\004" +
    "\uff7a\005\uff7a\010\uff7a\013\uff7a\020\uff7a\030\uff7a\037\uff7a" +
    "\040\uff7a\044\uff7a\047\uff7a\050\uff7a\051\uff7a\053\uff7a\054" +
    "\uff7a\060\uff7a\061\uff7a\062\uff7a\064\uff7a\065\uff7a\067\uff7a" +
    "\070\uff7a\072\uff7a\073\uff7a\001\002\000\024\005\154\020" +
    "\uff8b\044\uff8b\060\uff8b\061\uff8b\064\uff8b\065\uff8b\067\uff8b" +
    "\070\uff8b\001\002\000\046\004\117\017\127\033\113\046" +
    "\121\051\112\052\122\056\107\057\126\062\124\063\111" +
    "\071\115\073\130\076\100\103\106\104\125\105\110\106" +
    "\072\110\116\001\002\000\026\005\uff89\010\156\020\uff89" +
    "\044\uff89\060\uff89\061\uff89\064\uff89\065\uff89\067\uff89\070" +
    "\uff89\001\002\000\046\004\117\017\127\033\113\046\121" +
    "\051\112\052\122\056\107\057\126\062\124\063\111\071" +
    "\115\073\130\076\100\103\106\104\125\105\110\106\072" +
    "\110\116\001\002\000\030\005\uff87\010\uff87\013\160\020" +
    "\uff87\044\uff87\060\uff87\061\uff87\064\uff87\065\uff87\067\uff87" +
    "\070\uff87\001\002\000\046\004\117\017\127\033\113\046" +
    "\121\051\112\052\122\056\107\057\126\062\124\063\111" +
    "\071\115\073\130\076\100\103\106\104\125\105\110\106" +
    "\072\110\116\001\002\000\032\004\162\005\uff85\010\uff85" +
    "\013\uff85\020\uff85\044\uff85\060\uff85\061\uff85\064\uff85\065" +
    "\uff85\067\uff85\070\uff85\001\002\000\046\004\117\017\127" +
    "\033\113\046\121\051\112\052\122\056\107\057\126\062" +
    "\124\063\111\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\110\116\001\002\000\036\004\uff83\005" +
    "\uff83\010\uff83\013\uff83\020\uff83\030\166\044\uff83\054\165" +
    "\060\uff83\061\uff83\064\uff83\065\uff83\067\uff83\070\uff83\001" +
    "\002\000\046\004\117\017\127\033\113\046\121\051\112" +
    "\052\122\056\107\057\126\062\124\063\111\071\115\073" +
    "\130\076\100\103\106\104\125\105\110\106\072\110\116" +
    "\001\002\000\046\004\uff78\017\uff78\033\uff78\046\uff78\051" +
    "\uff78\052\uff78\056\uff78\057\uff78\062\uff78\063\uff78\071\uff78" +
    "\073\uff78\076\uff78\103\uff78\104\uff78\105\uff78\106\uff78\110" +
    "\uff78\001\002\000\046\004\uff79\017\uff79\033\uff79\046\uff79" +
    "\051\uff79\052\uff79\056\uff79\057\uff79\062\uff79\063\uff79\071" +
    "\uff79\073\uff79\076\uff79\103\uff79\104\uff79\105\uff79\106\uff79" +
    "\110\uff79\001\002\000\046\004\uff81\005\uff81\010\uff81\013" +
    "\uff81\020\uff81\030\uff81\037\174\040\170\044\uff81\047\173" +
    "\050\171\054\uff81\060\uff81\061\uff81\064\uff81\065\uff81\067" +
    "\uff81\070\uff81\001\002\000\046\004\uff72\017\uff72\033\uff72" +
    "\046\uff72\051\uff72\052\uff72\056\uff72\057\uff72\062\uff72\063" +
    "\uff72\071\uff72\073\uff72\076\uff72\103\uff72\104\uff72\105\uff72" +
    "\106\uff72\110\uff72\001\002\000\046\004\uff73\017\uff73\033" +
    "\uff73\046\uff73\051\uff73\052\uff73\056\uff73\057\uff73\062\uff73" +
    "\063\uff73\071\uff73\073\uff73\076\uff73\103\uff73\104\uff73\105" +
    "\uff73\106\uff73\110\uff73\001\002\000\046\004\117\017\127" +
    "\033\113\046\121\051\112\052\122\056\107\057\126\062" +
    "\124\063\111\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\110\116\001\002\000\046\004\uff75\017" +
    "\uff75\033\uff75\046\uff75\051\uff75\052\uff75\056\uff75\057\uff75" +
    "\062\uff75\063\uff75\071\uff75\073\uff75\076\uff75\103\uff75\104" +
    "\uff75\105\uff75\106\uff75\110\uff75\001\002\000\046\004\uff74" +
    "\017\uff74\033\uff74\046\uff74\051\uff74\052\uff74\056\uff74\057" +
    "\uff74\062\uff74\063\uff74\071\uff74\073\uff74\076\uff74\103\uff74" +
    "\104\uff74\105\uff74\106\uff74\110\uff74\001\002\000\052\004" +
    "\uff7f\005\uff7f\010\uff7f\013\uff7f\020\uff7f\030\uff7f\037\uff7f" +
    "\040\uff7f\044\uff7f\047\uff7f\050\uff7f\051\177\054\uff7f\060" +
    "\uff7f\061\uff7f\062\176\064\uff7f\065\uff7f\067\uff7f\070\uff7f" +
    "\001\002\000\046\004\uff71\017\uff71\033\uff71\046\uff71\051" +
    "\uff71\052\uff71\056\uff71\057\uff71\062\uff71\063\uff71\071\uff71" +
    "\073\uff71\076\uff71\103\uff71\104\uff71\105\uff71\106\uff71\110" +
    "\uff71\001\002\000\046\004\uff70\017\uff70\033\uff70\046\uff70" +
    "\051\uff70\052\uff70\056\uff70\057\uff70\062\uff70\063\uff70\071" +
    "\uff70\073\uff70\076\uff70\103\uff70\104\uff70\105\uff70\106\uff70" +
    "\110\uff70\001\002\000\046\004\117\017\127\033\113\046" +
    "\121\051\112\052\122\056\107\057\126\062\124\063\111" +
    "\071\115\073\130\076\100\103\106\104\125\105\110\106" +
    "\072\110\116\001\002\000\060\004\uff7d\005\uff7d\010\uff7d" +
    "\013\uff7d\020\uff7d\030\uff7d\037\uff7d\040\uff7d\044\uff7d\047" +
    "\uff7d\050\uff7d\051\uff7d\053\202\054\uff7d\060\uff7d\061\uff7d" +
    "\062\uff7d\064\uff7d\065\uff7d\067\uff7d\070\uff7d\072\204\073" +
    "\203\001\002\000\046\004\uff6d\017\uff6d\033\uff6d\046\uff6d" +
    "\051\uff6d\052\uff6d\056\uff6d\057\uff6d\062\uff6d\063\uff6d\071" +
    "\uff6d\073\uff6d\076\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d" +
    "\110\uff6d\001\002\000\046\004\uff6f\017\uff6f\033\uff6f\046" +
    "\uff6f\051\uff6f\052\uff6f\056\uff6f\057\uff6f\062\uff6f\063\uff6f" +
    "\071\uff6f\073\uff6f\076\uff6f\103\uff6f\104\uff6f\105\uff6f\106" +
    "\uff6f\110\uff6f\001\002\000\046\004\uff6e\017\uff6e\033\uff6e" +
    "\046\uff6e\051\uff6e\052\uff6e\056\uff6e\057\uff6e\062\uff6e\063" +
    "\uff6e\071\uff6e\073\uff6e\076\uff6e\103\uff6e\104\uff6e\105\uff6e" +
    "\106\uff6e\110\uff6e\001\002\000\046\004\117\017\127\033" +
    "\113\046\121\051\112\052\122\056\107\057\126\062\124" +
    "\063\111\071\115\073\130\076\100\103\106\104\125\105" +
    "\110\106\072\110\116\001\002\000\060\004\uff7b\005\uff7b" +
    "\010\uff7b\013\uff7b\020\uff7b\030\uff7b\037\uff7b\040\uff7b\044" +
    "\uff7b\047\uff7b\050\uff7b\051\uff7b\053\uff7b\054\uff7b\060\uff7b" +
    "\061\uff7b\062\uff7b\064\uff7b\065\uff7b\067\uff7b\070\uff7b\072" +
    "\uff7b\073\uff7b\001\002\000\012\004\uffd6\067\uffd6\107\uffd6" +
    "\110\uffd6\001\002\000\046\004\117\017\127\033\113\046" +
    "\121\051\112\052\122\056\107\057\126\062\124\063\111" +
    "\071\115\073\130\076\100\103\106\104\125\105\110\106" +
    "\072\110\116\001\002\000\050\004\117\017\127\033\113" +
    "\046\121\051\112\052\122\056\107\057\126\062\124\063" +
    "\111\067\uff90\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\110\116\001\002\000\076\004\uff5e\005" +
    "\uff5e\006\uff5e\007\uff5e\010\uff5e\013\uff5e\020\uff5e\025\uff5e" +
    "\030\uff5e\037\uff5e\040\uff5e\044\uff5e\045\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\060\uff5e" +
    "\061\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\067\uff5e\070" +
    "\uff5e\072\uff5e\073\uff5e\001\002\000\004\110\216\001\002" +
    "\000\004\110\215\001\002\000\076\004\uff61\005\uff61\006" +
    "\uff61\007\uff61\010\uff61\013\uff61\020\uff61\025\uff61\030\uff61" +
    "\037\uff61\040\uff61\044\uff61\045\uff61\046\uff61\047\uff61\050" +
    "\uff61\051\uff61\052\uff61\053\uff61\054\uff61\060\uff61\061\uff61" +
    "\062\uff61\063\uff61\064\uff61\065\uff61\067\uff61\070\uff61\072" +
    "\uff61\073\uff61\001\002\000\076\004\uff5f\005\uff5f\006\uff5f" +
    "\007\uff5f\010\uff5f\013\uff5f\020\uff5f\025\uff5f\030\uff5f\037" +
    "\uff5f\040\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f" +
    "\051\uff5f\052\uff5f\053\uff5f\054\uff5f\060\uff5f\061\uff5f\062" +
    "\uff5f\063\uff5f\064\uff5f\065\uff5f\067\uff5f\070\uff5f\072\uff5f" +
    "\073\uff5f\001\002\000\006\020\223\067\uff91\001\002\000" +
    "\006\020\uff8f\067\uff8f\001\002\000\004\067\222\001\002" +
    "\000\076\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\013" +
    "\uff5d\020\uff5d\025\uff5d\030\uff5d\037\uff5d\040\uff5d\044\uff5d" +
    "\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053" +
    "\uff5d\054\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d" +
    "\065\uff5d\067\uff5d\070\uff5d\072\uff5d\073\uff5d\001\002\000" +
    "\046\004\117\017\127\033\113\046\121\051\112\052\122" +
    "\056\107\057\126\062\124\063\111\071\115\073\130\076" +
    "\100\103\106\104\125\105\110\106\072\110\116\001\002" +
    "\000\006\020\uff8e\067\uff8e\001\002\000\004\065\226\001" +
    "\002\000\076\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60" +
    "\013\uff60\020\uff60\025\uff60\030\uff60\037\uff60\040\uff60\044" +
    "\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052\uff60" +
    "\053\uff60\054\uff60\060\uff60\061\uff60\062\uff60\063\uff60\064" +
    "\uff60\065\uff60\067\uff60\070\uff60\072\uff60\073\uff60\001\002" +
    "\000\046\004\117\017\127\033\113\046\121\051\112\052" +
    "\122\056\107\057\126\062\124\063\111\071\115\073\130" +
    "\076\100\103\106\104\125\105\110\106\072\110\116\001" +
    "\002\000\020\020\uff8d\044\uff8d\061\uff8d\064\uff8d\065\uff8d" +
    "\067\uff8d\070\uff8d\001\002\000\006\020\uffae\070\uffae\001" +
    "\002\000\006\020\233\070\234\001\002\000\004\107\235" +
    "\001\002\000\132\002\uffed\004\uffed\011\uffed\012\uffed\014" +
    "\uffed\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\041" +
    "\uffed\042\uffed\044\uffed\046\uffed\051\uffed\052\uffed\055\uffed" +
    "\056\uffed\057\uffed\062\uffed\063\uffed\064\uffed\066\uffed\071" +
    "\uffed\073\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed" +
    "\102\uffed\103\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110" +
    "\uffed\001\002\000\006\020\uffad\070\uffad\001\002\000\036" +
    "\002\ufffb\011\ufffb\014\ufffb\021\ufffb\032\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\042\ufffb\074\ufffb\075\ufffb\077\ufffb\102\ufffb" +
    "\107\ufffb\001\002\000\010\045\064\073\060\110\uffd5\001" +
    "\002\000\010\045\uffdf\073\uffdf\110\uffdf\001\002\000\004" +
    "\110\273\001\002\000\004\016\265\001\002\000\020\011" +
    "\034\014\031\034\035\035\242\042\036\102\245\107\032" +
    "\001\002\000\010\045\064\073\060\110\uffd5\001\002\000" +
    "\004\110\246\001\002\000\004\007\247\001\002\000\046" +
    "\004\117\017\127\033\113\046\121\051\112\052\122\056" +
    "\107\057\126\062\124\063\111\071\115\073\130\076\100" +
    "\103\106\104\125\105\110\106\072\110\116\001\002\000" +
    "\004\070\251\001\002\000\132\002\ufff0\004\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\017\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\041\ufff0\042\ufff0\044\ufff0\046\ufff0\051\ufff0\052" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\062\ufff0\063\ufff0\064\ufff0" +
    "\066\ufff0\071\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077" +
    "\ufff0\100\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0" +
    "\107\ufff0\110\ufff0\001\002\000\004\110\262\001\002\000" +
    "\006\020\254\070\255\001\002\000\010\045\064\073\060" +
    "\110\uffd5\001\002\000\132\002\ufff1\004\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\015\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\041\ufff1\042\ufff1\044\ufff1\046\ufff1\051\ufff1\052\ufff1" +
    "\055\ufff1\056\ufff1\057\ufff1\062\ufff1\063\ufff1\064\ufff1\066" +
    "\ufff1\071\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1" +
    "\100\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107" +
    "\ufff1\110\ufff1\001\002\000\004\110\257\001\002\000\004" +
    "\007\260\001\002\000\046\004\117\017\127\033\113\046" +
    "\121\051\112\052\122\056\107\057\126\062\124\063\111" +
    "\071\115\073\130\076\100\103\106\104\125\105\110\106" +
    "\072\110\116\001\002\000\006\020\uffa9\070\uffa9\001\002" +
    "\000\004\007\263\001\002\000\046\004\117\017\127\033" +
    "\113\046\121\051\112\052\122\056\107\057\126\062\124" +
    "\063\111\071\115\073\130\076\100\103\106\104\125\105" +
    "\110\106\072\110\116\001\002\000\006\020\uffaa\070\uffaa" +
    "\001\002\000\016\011\034\014\031\034\035\042\036\101" +
    "\042\107\032\001\002\000\006\004\043\046\uffb1\001\002" +
    "\000\004\046\270\001\002\000\020\011\034\014\031\034" +
    "\035\035\033\042\036\067\uffb6\107\032\001\002\000\004" +
    "\067\272\001\002\000\010\045\uffde\073\uffde\110\uffde\001" +
    "\002\000\004\007\274\001\002\000\046\004\117\017\127" +
    "\033\113\046\121\051\112\052\122\056\107\057\126\062" +
    "\124\063\111\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\110\116\001\002\000\004\070\276\001" +
    "\002\000\132\002\ufff2\004\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\041\ufff2" +
    "\042\ufff2\044\ufff2\046\ufff2\051\ufff2\052\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\071\ufff2" +
    "\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\001\002\000\004\110\316\001\002\000\006\020\301\070" +
    "\302\001\002\000\010\045\064\073\060\110\uffd5\001\002" +
    "\000\132\002\ufff3\004\ufff3\011\ufff3\012\ufff3\014\ufff3\015" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041\ufff3\042" +
    "\ufff3\044\ufff3\046\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\071\ufff3\073" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3\102\ufff3" +
    "\103\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\001" +
    "\002\000\004\110\304\001\002\000\010\007\306\020\uffa6" +
    "\070\uffa6\001\002\000\006\020\uffab\070\uffab\001\002\000" +
    "\050\004\117\017\127\033\113\044\310\046\121\051\112" +
    "\052\122\056\107\057\126\062\124\063\111\071\115\073" +
    "\130\076\100\103\106\104\125\105\110\106\072\110\116" +
    "\001\002\000\006\020\uffa8\070\uffa8\001\002\000\046\004" +
    "\117\017\127\033\113\046\121\051\112\052\122\056\107" +
    "\057\126\062\124\063\111\071\115\073\130\076\100\103" +
    "\106\104\125\105\110\106\072\110\116\001\002\000\006" +
    "\020\314\064\313\001\002\000\006\020\uffa5\064\uffa5\001" +
    "\002\000\006\020\uffa7\070\uffa7\001\002\000\046\004\117" +
    "\017\127\033\113\046\121\051\112\052\122\056\107\057" +
    "\126\062\124\063\111\071\115\073\130\076\100\103\106" +
    "\104\125\105\110\106\072\110\116\001\002\000\006\020" +
    "\uffa4\064\uffa4\001\002\000\010\007\306\020\uffa6\070\uffa6" +
    "\001\002\000\006\020\uffac\070\uffac\001\002\000\004\044" +
    "\321\001\002\000\016\011\uffec\014\uffec\034\uffec\035\uffec" +
    "\042\uffec\107\uffec\001\002\000\016\011\034\014\031\034" +
    "\035\035\242\042\036\107\032\001\002\000\010\045\064" +
    "\073\060\110\uffd5\001\002\000\020\011\034\014\031\034" +
    "\035\035\242\042\036\064\326\107\032\001\002\000\020" +
    "\011\uffea\014\uffea\034\uffea\035\uffea\042\uffea\064\uffea\107" +
    "\uffea\001\002\000\004\070\330\001\002\000\020\011\uffe9" +
    "\014\uffe9\034\uffe9\035\uffe9\042\uffe9\064\uffe9\107\uffe9\001" +
    "\002\000\132\002\uffeb\004\uffeb\011\uffeb\012\uffeb\014\uffeb" +
    "\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\041\uffeb" +
    "\042\uffeb\044\uffeb\046\uffeb\051\uffeb\052\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\062\uffeb\063\uffeb\064\uffeb\066\uffeb\071\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\102" +
    "\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb" +
    "\001\002\000\004\110\337\001\002\000\006\020\333\070" +
    "\334\001\002\000\010\045\064\073\060\110\uffd5\001\002" +
    "\000\020\011\uffe8\014\uffe8\034\uffe8\035\uffe8\042\uffe8\064" +
    "\uffe8\107\uffe8\001\002\000\004\110\336\001\002\000\006" +
    "\020\uffaf\070\uffaf\001\002\000\006\020\uffb0\070\uffb0\001" +
    "\002\000\016\011\034\014\031\034\035\042\036\101\042" +
    "\107\032\001\002\000\006\004\043\110\uffb1\001\002\000" +
    "\004\110\343\001\002\000\004\046\uffe7\001\002\000\004" +
    "\046\345\001\002\000\020\011\034\014\031\034\035\035" +
    "\033\042\036\067\uffb6\107\032\001\002\000\004\067\347" +
    "\001\002\000\004\044\uffe6\001\002\000\004\044\351\001" +
    "\002\000\124\004\117\011\uffee\012\u0101\014\uffee\015\371" +
    "\017\127\021\uffee\022\357\023\355\024\356\031\376\033" +
    "\113\034\uffee\035\uffee\041\u0104\042\uffee\044\364\046\121" +
    "\051\112\052\122\055\365\056\107\057\126\062\124\063" +
    "\111\064\uffc9\066\361\071\115\073\130\074\014\075\011" +
    "\076\100\077\024\100\354\102\uffee\103\106\104\125\105" +
    "\110\106\072\107\uffee\110\116\001\002\000\124\004\uffbc" +
    "\011\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\041\uffbc\042\uffbc\044\uffbc\046\uffbc\051\uffbc\052\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc" +
    "\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100" +
    "\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc" +
    "\110\uffbc\001\002\000\124\004\uffbd\011\uffbd\012\uffbd\014" +
    "\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\031\uffbd\033\uffbd\034\uffbd\035\uffbd\041\uffbd\042\uffbd\044" +
    "\uffbd\046\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\066\uffbd\071\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002\000" +
    "\046\004\117\017\127\033\113\046\121\051\112\052\122" +
    "\056\107\057\126\062\124\063\111\071\115\073\130\076" +
    "\100\103\106\104\125\105\110\106\072\110\116\001\002" +
    "\000\004\061\u0123\001\002\000\046\004\117\017\127\033" +
    "\113\046\121\051\112\052\122\056\107\057\126\062\124" +
    "\063\111\071\115\073\130\076\100\103\106\104\125\105" +
    "\110\106\072\110\116\001\002\000\004\070\u0120\001\002" +
    "\000\124\004\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\017" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\031\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\041\uffbb\042\uffbb\044\uffbb\046\uffbb\051" +
    "\uffbb\052\uffbb\055\uffbb\056\uffbb\057\uffbb\062\uffbb\063\uffbb" +
    "\064\uffbb\066\uffbb\071\uffbb\073\uffbb\074\uffbb\075\uffbb\076" +
    "\uffbb\077\uffbb\100\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb" +
    "\106\uffbb\107\uffbb\110\uffbb\001\002\000\050\004\117\017" +
    "\127\033\113\046\121\051\112\052\122\056\107\057\126" +
    "\062\124\063\111\070\u011e\071\115\073\130\076\100\103" +
    "\106\104\125\105\110\106\072\110\116\001\002\000\124" +
    "\004\uffba\011\uffba\012\uffba\014\uffba\015\uffba\017\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\031\uffba\033\uffba\034\uffba" +
    "\035\uffba\041\uffba\042\uffba\044\uffba\046\uffba\051\uffba\052" +
    "\uffba\055\uffba\056\uffba\057\uffba\062\uffba\063\uffba\064\uffba" +
    "\066\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077" +
    "\uffba\100\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba" +
    "\107\uffba\110\uffba\001\002\000\124\004\uffc0\011\uffc0\012" +
    "\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\041\uffc0\042" +
    "\uffc0\044\uffc0\046\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\071\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\001" +
    "\002\000\124\004\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\041\uffcd\042\uffcd\044\uffcd\046\uffcd" +
    "\051\uffcd\052\uffcd\055\uffcd\056\uffcd\057\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\066\uffcd\071\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\100\uffcd\102\uffcd\103\uffcd\104\uffcd\105" +
    "\uffcd\106\uffcd\107\uffcd\110\uffcd\001\002\000\046\004\117" +
    "\017\127\033\113\046\121\051\112\052\122\056\107\057" +
    "\126\062\124\063\111\071\115\073\130\076\100\103\106" +
    "\104\125\105\110\106\072\110\116\001\002\000\124\004" +
    "\117\011\uffee\012\u0101\014\uffee\015\371\017\127\021\uffee" +
    "\022\357\023\355\024\356\031\376\033\113\034\uffee\035" +
    "\uffee\041\u0104\042\uffee\044\364\046\121\051\112\052\122" +
    "\055\365\056\107\057\126\062\124\063\111\064\uffca\066" +
    "\361\071\115\073\130\074\014\075\011\076\100\077\024" +
    "\100\354\102\uffee\103\106\104\125\105\110\106\072\107" +
    "\uffee\110\116\001\002\000\124\004\uffb9\011\uffb9\012\uffb9" +
    "\014\uffb9\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\041\uffb9\042\uffb9" +
    "\044\uffb9\046\uffb9\051\uffb9\052\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9\071\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\001\002" +
    "\000\124\004\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\031\uffc3\033\uffc3" +
    "\034\uffc3\035\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3\051" +
    "\uffc3\052\uffc3\055\uffc3\056\uffc3\057\uffc3\062\uffc3\063\uffc3" +
    "\064\uffc3\066\uffc3\071\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\100\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3" +
    "\106\uffc3\107\uffc3\110\uffc3\001\002\000\004\043\u0113\001" +
    "\002\000\124\004\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1" +
    "\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1" +
    "\051\uffc1\052\uffc1\055\uffc1\056\uffc1\057\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\066\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\100\uffc1\102\uffc1\103\uffc1\104\uffc1\105" +
    "\uffc1\106\uffc1\107\uffc1\110\uffc1\001\002\000\124\004\uffc4" +
    "\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\041\uffc4\042\uffc4\044\uffc4\046\uffc4\051\uffc4\052\uffc4\055" +
    "\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4" +
    "\071\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\001\002\000\004\070\u0112\001\002\000\004\064" +
    "\u0111\001\002\000\004\046\u010d\001\002\000\124\004\uffc6" +
    "\011\uffc6\012\uffc6\014\uffc6\015\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\041\uffc6\042\uffc6\044\uffc6\046\uffc6\051\uffc6\052\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\062\uffc6\063\uffc6\064\uffc6\066\uffc6" +
    "\071\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6" +
    "\110\uffc6\001\002\000\124\004\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\031\uffc8\033\uffc8\034\uffc8\035\uffc8\041\uffc8\042\uffc8\044" +
    "\uffc8\046\uffc8\051\uffc8\052\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\066\uffc8\071\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\001\002\000" +
    "\004\070\u010c\001\002\000\124\004\uffc5\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\041\uffc5\042\uffc5" +
    "\044\uffc5\046\uffc5\051\uffc5\052\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\071\uffc5\073\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\001\002" +
    "\000\124\004\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\017" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\031\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\041\uffbe\042\uffbe\044\uffbe\046\uffbe\051" +
    "\uffbe\052\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\066\uffbe\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe" +
    "\106\uffbe\107\uffbe\110\uffbe\001\002\000\046\004\117\017" +
    "\127\033\113\046\121\051\112\052\122\056\107\057\126" +
    "\062\124\063\111\071\115\073\130\076\100\103\106\104" +
    "\125\105\110\106\072\110\116\001\002\000\124\004\uffb8" +
    "\011\uffb8\012\uffb8\014\uffb8\015\uffb8\017\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\041\uffb8\042\uffb8\044\uffb8\046\uffb8\051\uffb8\052\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8" +
    "\071\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8" +
    "\110\uffb8\001\002\000\124\004\uffbf\011\uffbf\012\uffbf\014" +
    "\uffbf\015\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\031\uffbf\033\uffbf\034\uffbf\035\uffbf\041\uffbf\042\uffbf\044" +
    "\uffbf\046\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\062\uffbf\063\uffbf\064\uffbf\066\uffbf\071\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000" +
    "\004\044\364\001\002\000\126\004\uffa1\011\uffa1\012\uffa1" +
    "\014\uffa1\015\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\026\u010a\031\uffa1\033\uffa1\034\uffa1\035\uffa1\041\uffa1" +
    "\042\uffa1\044\uffa1\046\uffa1\051\uffa1\052\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\062\uffa1\063\uffa1\064\uffa1\066\uffa1\071\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1" +
    "\001\002\000\124\004\uffa3\011\uffa3\012\uffa3\014\uffa3\015" +
    "\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\031\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\041\uffa3\042\uffa3\044\uffa3\046" +
    "\uffa3\051\uffa3\052\uffa3\055\uffa3\056\uffa3\057\uffa3\062\uffa3" +
    "\063\uffa3\064\uffa3\066\uffa3\071\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\100\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\106\uffa3\107\uffa3\110\uffa3\001\002\000\004\044" +
    "\364\001\002\000\124\004\uffa2\011\uffa2\012\uffa2\014\uffa2" +
    "\015\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\031" +
    "\uffa2\033\uffa2\034\uffa2\035\uffa2\041\uffa2\042\uffa2\044\uffa2" +
    "\046\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\057\uffa2\062" +
    "\uffa2\063\uffa2\064\uffa2\066\uffa2\071\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2\103\uffa2\104" +
    "\uffa2\105\uffa2\106\uffa2\107\uffa2\110\uffa2\001\002\000\124" +
    "\004\uff9f\011\uff9f\012\uff9f\014\uff9f\015\uff9f\017\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\031\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\041\uff9f\042\uff9f\044\uff9f\046\uff9f\051\uff9f\052" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\066\uff9f\071\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\100\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f" +
    "\107\uff9f\110\uff9f\001\002\000\046\004\117\017\127\033" +
    "\113\046\121\051\112\052\122\056\107\057\126\062\124" +
    "\063\111\071\115\073\130\076\100\103\106\104\125\105" +
    "\110\106\072\110\116\001\002\000\004\067\u010f\001\002" +
    "\000\004\070\u0110\001\002\000\124\004\uff9d\011\uff9d\012" +
    "\uff9d\014\uff9d\015\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\031\uff9d\033\uff9d\034\uff9d\035\uff9d\041\uff9d\042" +
    "\uff9d\044\uff9d\046\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\062\uff9d\063\uff9d\064\uff9d\066\uff9d\071\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\102\uff9d" +
    "\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\001" +
    "\002\000\036\002\uffe5\011\uffe5\014\uffe5\021\uffe5\032\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\042\uffe5\074\uffe5\075\uffe5\077" +
    "\uffe5\102\uffe5\107\uffe5\001\002\000\124\004\uffc2\011\uffc2" +
    "\012\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\041\uffc2" +
    "\042\uffc2\044\uffc2\046\uffc2\051\uffc2\052\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\071\uffc2" +
    "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2" +
    "\001\002\000\046\004\117\017\127\033\113\046\121\051" +
    "\112\052\122\056\107\057\126\062\124\063\111\071\115" +
    "\073\130\076\100\103\106\104\125\105\110\106\072\110" +
    "\116\001\002\000\004\070\u0115\001\002\000\124\004\uff9a" +
    "\011\uff9a\012\uff9a\014\uff9a\015\uff9a\017\uff9a\021\uff9a\022" +
    "\uff9a\023\uff9a\024\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\041\uff9a\042\uff9a\044\uff9a\046\uff9a\051\uff9a\052\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\062\uff9a\063\uff9a\064\uff9a\066\uff9a" +
    "\071\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100" +
    "\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a" +
    "\110\uff9a\001\002\000\124\004\uffc7\011\uffc7\012\uffc7\014" +
    "\uffc7\015\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\031\uffc7\033\uffc7\034\uffc7\035\uffc7\041\uffc7\042\uffc7\044" +
    "\uffc7\046\uffc7\051\uffc7\052\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\066\uffc7\071\uffc7\073\uffc7\074" +
    "\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\001\002\000" +
    "\004\070\u0118\001\002\000\124\004\uff98\011\uff98\012\uff98" +
    "\014\uff98\015\uff98\017\uff98\021\uff98\022\uff98\023\uff98\024" +
    "\uff98\031\uff98\033\uff98\034\uff98\035\uff98\041\uff98\042\uff98" +
    "\044\uff98\046\uff98\051\uff98\052\uff98\055\uff98\056\uff98\057" +
    "\uff98\062\uff98\063\uff98\064\uff98\066\uff98\071\uff98\073\uff98" +
    "\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\102\uff98\103" +
    "\uff98\104\uff98\105\uff98\106\uff98\107\uff98\110\uff98\001\002" +
    "\000\124\004\117\011\uffee\012\u0101\014\uffee\015\371\017" +
    "\127\021\uffee\022\357\023\355\024\356\031\376\033\113" +
    "\034\uffee\035\uffee\041\u0104\042\uffee\044\364\046\121\051" +
    "\112\052\122\055\365\056\107\057\126\062\124\063\111" +
    "\064\uffc9\066\361\071\115\073\130\074\014\075\011\076" +
    "\100\077\024\100\354\102\uffee\103\106\104\125\105\110" +
    "\106\072\107\uffee\110\116\001\002\000\004\064\uffcc\001" +
    "\002\000\004\064\u011c\001\002\000\126\004\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\015\uffcb\017\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\026\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\041\uffcb\042\uffcb\044\uffcb\046\uffcb\051\uffcb\052\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb" +
    "\071\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100" +
    "\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb" +
    "\110\uffcb\001\002\000\004\070\u011f\001\002\000\124\004" +
    "\uff9c\011\uff9c\012\uff9c\014\uff9c\015\uff9c\017\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\031\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\041\uff9c\042\uff9c\044\uff9c\046\uff9c\051\uff9c\052\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\062\uff9c\063\uff9c\064\uff9c\066" +
    "\uff9c\071\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\100\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107" +
    "\uff9c\110\uff9c\001\002\000\124\004\uff9b\011\uff9b\012\uff9b" +
    "\014\uff9b\015\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024" +
    "\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\041\uff9b\042\uff9b" +
    "\044\uff9b\046\uff9b\051\uff9b\052\uff9b\055\uff9b\056\uff9b\057" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\066\uff9b\071\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\102\uff9b\103" +
    "\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\001\002" +
    "\000\124\004\uff9e\011\uff9e\012\uff9e\014\uff9e\015\uff9e\017" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\031\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\041\uff9e\042\uff9e\044\uff9e\046\uff9e\051" +
    "\uff9e\052\uff9e\055\uff9e\056\uff9e\057\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\066\uff9e\071\uff9e\073\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\077\uff9e\100\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e" +
    "\106\uff9e\107\uff9e\110\uff9e\001\002\000\004\070\u0122\001" +
    "\002\000\124\004\uff97\011\uff97\012\uff97\014\uff97\015\uff97" +
    "\017\uff97\021\uff97\022\uff97\023\uff97\024\uff97\031\uff97\033" +
    "\uff97\034\uff97\035\uff97\041\uff97\042\uff97\044\uff97\046\uff97" +
    "\051\uff97\052\uff97\055\uff97\056\uff97\057\uff97\062\uff97\063" +
    "\uff97\064\uff97\066\uff97\071\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\102\uff97\103\uff97\104\uff97\105" +
    "\uff97\106\uff97\107\uff97\110\uff97\001\002\000\050\004\117" +
    "\017\127\027\u0126\033\113\046\121\051\112\052\122\056" +
    "\107\057\126\062\124\063\111\071\115\073\130\076\100" +
    "\103\106\104\125\105\110\106\072\110\116\001\002\000" +
    "\006\061\u0128\070\u0129\001\002\000\006\061\uff96\070\uff96" +
    "\001\002\000\006\061\uff93\070\uff93\001\002\000\006\061" +
    "\uff94\070\uff94\001\002\000\050\004\117\017\127\027\u0126" +
    "\033\113\046\121\051\112\052\122\056\107\057\126\062" +
    "\124\063\111\071\115\073\130\076\100\103\106\104\125" +
    "\105\110\106\072\110\116\001\002\000\124\004\uff99\011" +
    "\uff99\012\uff99\014\uff99\015\uff99\017\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\031\uff99\033\uff99\034\uff99\035\uff99\041" +
    "\uff99\042\uff99\044\uff99\046\uff99\051\uff99\052\uff99\055\uff99" +
    "\056\uff99\057\uff99\062\uff99\063\uff99\064\uff99\066\uff99\071" +
    "\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99" +
    "\102\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110" +
    "\uff99\001\002\000\006\061\uff95\070\uff95\001\002\000\004" +
    "\044\364\001\002\000\124\004\uffa0\011\uffa0\012\uffa0\014" +
    "\uffa0\015\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\031\uffa0\033\uffa0\034\uffa0\035\uffa0\041\uffa0\042\uffa0\044" +
    "\uffa0\046\uffa0\051\uffa0\052\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\062\uffa0\063\uffa0\064\uffa0\066\uffa0\071\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\102\uffa0\103\uffa0" +
    "\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\001\002\000" +
    "\010\045\064\073\060\110\uffd5\001\002\000\004\016\u012f" +
    "\001\002\000\016\011\034\014\031\034\035\042\036\101" +
    "\042\107\032\001\002\000\004\110\u0131\001\002\000\004" +
    "\046\uffe4\001\002\000\004\046\u0133\001\002\000\020\011" +
    "\034\014\031\034\035\035\033\042\036\067\uffb6\107\032" +
    "\001\002\000\004\067\u0135\001\002\000\004\070\uffe3\001" +
    "\002\000\004\070\u0137\001\002\000\036\002\uffe2\011\uffe2" +
    "\014\uffe2\021\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\042" +
    "\uffe2\074\uffe2\075\uffe2\077\uffe2\102\uffe2\107\uffe2\001\002" +
    "\000\006\020\333\070\u0139\001\002\000\036\002\ufff4\011" +
    "\ufff4\014\ufff4\021\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\042\ufff4\074\ufff4\075\ufff4\077\ufff4\102\ufff4\107\ufff4\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\006\003\003\113\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\014\007\016\010\005" +
    "\011\020\012\012\013\022\014\011\015\015\001\001\000" +
    "\002\001\001\000\012\077\025\100\026\101\237\103\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\025\100\026\101\237\103\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\235\007\016\010\005\011\020" +
    "\012\012\013\022\014\011\015\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\077\025" +
    "\100\026\101\027\102\024\001\001\000\004\106\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\064" +
    "\053\065\054\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\077\025\100\026\101\037\104" +
    "\040\001\001\000\010\053\060\054\061\055\056\001\001" +
    "\000\004\016\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\061\047\077\025\100\026" +
    "\101\027\102\045\111\050\112\046\001\001\000\004\016" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\061\053\077\025\100" +
    "\026\101\027\102\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\043\100\045\122\060\117\062\113\063" +
    "\104\064\103\065\102\066\101\067\075\070\074\071\072" +
    "\072\070\073\067\074\066\075\076\076\073\001\001\000" +
    "\002\001\001\000\004\054\062\001\001\000\002\001\001" +
    "\000\004\057\204\001\001\000\004\056\177\001\001\000" +
    "\002\001\001\000\004\047\171\001\001\000\002\001\001" +
    "\000\004\046\163\001\001\000\002\001\001\000\004\060" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\045\122\060\117\074\147" +
    "\075\076\076\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\122\060" +
    "\117\074\141\075\076\076\073\001\001\000\014\045\122" +
    "\060\117\074\140\075\076\076\073\001\001\000\050\045" +
    "\122\060\117\062\133\063\104\064\103\065\102\066\101" +
    "\067\075\070\074\071\072\072\070\073\067\074\066\075" +
    "\076\076\073\077\025\100\026\101\027\102\134\001\001" +
    "\000\002\001\001\000\014\045\122\060\117\074\132\075" +
    "\076\076\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\122\060" +
    "\117\074\130\075\076\076\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\122\060\117\074\136\075\076" +
    "\076\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\045\122\060\117" +
    "\074\143\075\076\076\073\077\025\100\026\101\027\102" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\045" +
    "\122\060\117\064\152\065\102\066\101\067\075\070\074" +
    "\071\072\072\070\073\067\074\151\075\076\076\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\045\122" +
    "\060\117\065\154\066\101\067\075\070\074\071\072\072" +
    "\070\073\067\074\151\075\076\076\073\001\001\000\002" +
    "\001\001\000\030\045\122\060\117\066\156\067\075\070" +
    "\074\071\072\072\070\073\067\074\151\075\076\076\073" +
    "\001\001\000\002\001\001\000\026\045\122\060\117\067" +
    "\160\070\074\071\072\072\070\073\067\074\151\075\076" +
    "\076\073\001\001\000\002\001\001\000\024\045\122\060" +
    "\117\070\162\071\072\072\070\073\067\074\151\075\076" +
    "\076\073\001\001\000\004\046\163\001\001\000\022\045" +
    "\122\060\117\071\166\072\070\073\067\074\151\075\076" +
    "\076\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\045\122\060\117\072\174\073\067\074\151\075" +
    "\076\076\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\045\122\060\117\073\200\074\151\075\076" +
    "\076\073\001\001\000\004\057\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\045\122" +
    "\060\117\074\205\075\076\076\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\045\122\060\117\062\224" +
    "\063\104\064\103\065\102\066\101\067\075\070\074\071" +
    "\072\072\070\073\067\074\066\075\076\076\073\001\001" +
    "\000\044\025\220\044\216\045\122\060\117\062\217\063" +
    "\104\064\103\065\102\066\101\067\075\070\074\071\072" +
    "\072\070\073\067\074\066\075\076\076\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\045\122" +
    "\060\117\062\223\063\104\064\103\065\102\066\101\067" +
    "\075\070\074\071\072\072\070\073\067\074\066\075\076" +
    "\076\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\045\122\060\117\062\227\063\104" +
    "\064\103\065\102\066\101\067\075\070\074\071\072\072" +
    "\070\073\067\074\066\075\076\076\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\052\276\053\065\054\061\107\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\077\025\100\026\101\237\103\243\001\001\000\012\052" +
    "\251\053\065\054\061\110\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\045\122\060\117\062\247\063" +
    "\104\064\103\065\102\066\101\067\075\070\074\071\072" +
    "\072\070\073\067\074\066\075\076\076\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\255\053\065\054\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\043\260\045\122\060\117\062\113\063\104\064\103\065" +
    "\102\066\101\067\075\070\074\071\072\072\070\073\067" +
    "\074\066\075\076\076\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\043\263\045\122\060\117\062\113" +
    "\063\104\064\103\065\102\066\101\067\075\070\074\071" +
    "\072\072\070\073\067\074\066\075\076\076\073\001\001" +
    "\000\002\001\001\000\012\077\025\100\026\101\037\104" +
    "\265\001\001\000\004\016\266\001\001\000\002\001\001" +
    "\000\020\061\047\077\025\100\026\101\027\102\045\111" +
    "\270\112\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\045\122\060\117\062\274\063" +
    "\104\064\103\065\102\066\101\067\075\070\074\071\072" +
    "\072\070\073\067\074\066\075\076\076\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\302\053\065\054\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\304\001\001" +
    "\000\002\001\001\000\040\045\122\060\117\062\306\063" +
    "\104\064\103\065\102\066\101\067\075\070\074\071\072" +
    "\072\070\073\067\074\066\075\076\076\073\001\001\000" +
    "\002\001\001\000\042\045\122\051\310\060\117\062\311" +
    "\063\104\064\103\065\102\066\101\067\075\070\074\071" +
    "\072\072\070\073\067\074\066\075\076\076\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\045\122\060\117\062\314\063\104\064\103\065\102" +
    "\066\101\067\075\070\074\071\072\072\070\073\067\074" +
    "\066\075\076\076\073\001\001\000\002\001\001\000\004" +
    "\050\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\321\001\001\000\016\017\323\020\324\077\025" +
    "\100\026\101\237\103\322\001\001\000\012\052\330\053" +
    "\065\054\061\105\331\001\001\000\014\020\326\077\025" +
    "\100\026\101\237\103\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\052\334\053\065\054" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\077\025\100\026\101" +
    "\037\104\340\001\001\000\004\016\341\001\001\000\002" +
    "\001\001\000\004\115\343\001\001\000\002\001\001\000" +
    "\020\061\047\077\025\100\026\101\027\102\045\111\345" +
    "\112\046\001\001\000\002\001\001\000\004\116\347\001" +
    "\001\000\002\001\001\000\104\012\376\013\u0101\014\011" +
    "\015\372\021\374\022\365\023\377\024\367\026\371\030" +
    "\362\031\u0105\032\u0102\033\352\034\351\035\357\036\361" +
    "\037\366\040\u0104\045\122\060\117\062\373\063\104\064" +
    "\103\065\102\066\101\067\075\070\074\071\072\072\070" +
    "\073\067\074\066\075\076\076\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\045\122\060\117\062\u012a" +
    "\063\104\064\103\065\102\066\101\067\075\070\074\071" +
    "\072\072\070\073\067\074\066\075\076\076\073\001\001" +
    "\000\002\001\001\000\014\045\122\060\117\074\u0120\075" +
    "\076\076\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\045\122\060\117\062\u011c\063\104\064\103\065" +
    "\102\066\101\067\075\070\074\071\072\072\070\073\067" +
    "\074\066\075\076\076\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u0118\001\001\000\014\045\122" +
    "\060\117\074\u0116\075\076\076\073\001\001\000\100\012" +
    "\376\013\u0101\014\011\015\372\023\u0115\024\367\026\371" +
    "\030\362\031\u0105\032\u0102\033\352\034\351\035\357\036" +
    "\361\037\366\040\u0104\045\122\060\117\062\373\063\104" +
    "\064\103\065\102\066\101\067\075\070\074\071\072\072" +
    "\070\073\067\074\066\075\076\076\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\045\122\060\117\062\u0106\063\104\064\103\065\102\066" +
    "\101\067\075\070\074\071\072\072\070\073\067\074\066" +
    "\075\076\076\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0107\001\001\000\004\027\u0108\001\001" +
    "\000\002\001\001\000\004\024\u010a\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\045\122\060\117\062\u010d" +
    "\063\104\064\103\065\102\066\101\067\075\070\074\071" +
    "\072\072\070\073\067\074\066\075\076\076\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\045\122\060\117" +
    "\074\u0113\075\076\076\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\012\376\013\u0101\014\011\015\372\021" +
    "\u0119\022\365\023\377\024\367\026\371\030\362\031\u0105" +
    "\032\u0102\033\352\034\351\035\357\036\361\037\366\040" +
    "\u0104\045\122\060\117\062\373\063\104\064\103\065\102" +
    "\066\101\067\075\070\074\071\072\072\070\073\067\074" +
    "\066\075\076\076\073\001\001\000\004\122\u011a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\041\u0123\042\u0124\045" +
    "\122\060\117\062\u0126\063\104\064\103\065\102\066\101" +
    "\067\075\070\074\071\072\072\070\073\067\074\066\075" +
    "\076\076\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\042\u0129\045" +
    "\122\060\117\062\u0126\063\104\064\103\065\102\066\101" +
    "\067\075\070\074\071\072\072\070\073\067\074\066\075" +
    "\076\076\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\u012b\001\001\000\002\001\001\000\012\052" +
    "\330\053\065\054\061\105\u0137\001\001\000\002\001\001" +
    "\000\012\077\025\100\026\101\037\104\u012f\001\001\000" +
    "\002\001\001\000\004\117\u0131\001\001\000\002\001\001" +
    "\000\020\061\047\077\025\100\026\101\027\102\045\111" +
    "\u0133\112\046\001\001\000\002\001\001\000\004\120\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // QualIdent ::= T_ID_U 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*QualIdent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_Global_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("nullptr");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false", new BoolType("bool",1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true", new BoolType("bool",1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator3 ::= T_CHAR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new FloatType("float", 32));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new IntType("int", 32));
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncCall (_1);
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if(_2.equals("++"))
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new IncOp());
                        else
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new DecOp());
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
            if(_1.equals("++"))
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new IncOp());
			else
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new DecOp());
        
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Designator ::= T_LPAREN Type T_RPAREN Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Designator ::= T_SIZEOF T_LPAREN Type T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new ConstSTO("sizeof type - fix me");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new ConstSTO("sizeof variable - fix me");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            RESULT = ((MyParser) parser).DoUnaryExpr(_1, new NotOp());
        
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
        
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
        
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Relation ::= T_GTE 
            {
              Object RESULT = null;
		
                        RESULT = ">=";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Relation ::= T_LTE 
            {
              Object RESULT = null;
		
                        RESULT = "<=";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Relation ::= T_GT 
            {
              Object RESULT = null;
		
                        RESULT = ">";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Relation ::= T_LT 
            {
              Object RESULT = null;
		
						RESULT = "<";
					
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // UnarySign ::= T_MINUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // UnarySign ::= T_PLUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Equality ::= T_NEQ 
            {
              Object RESULT = null;
		
    				RESULT = "!=";
    			
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Equality ::= T_EQU 
            {
              Object RESULT = null;
		
					RESULT = "==";
				
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //Check #1
                        if(_2.equals("*"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1,new MulOp(), _3);
                        else if(_2.equals("/"))
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new DivOp(),_3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new ModOp(),_3); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //Check #1
                        if(_2.equals("+"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AddOp(), _3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new MinusOp(),_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //check #0
                    	if(_2.equals("<"))
                    	  RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessThanOp(), _3);
                        else if (_2.equals("<="))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessAndEqualThanOp(), _3);
                        else if(_2.equals(">"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterThanOp(), _3);
                        else
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterAndEqualThanOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if(_2.equals("=="))
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new EqualOp(), _3);
                        else
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new NotEqualOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwAndOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwXorOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwOrOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AndOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new OrOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoAssignExpr (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExprList ::= ExprList T_COMMA Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExprList ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OptExprList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptExprList ::= ExprList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ConstExpr ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // WritePair ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WritePairList ::= WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NewStmt ::= T_NEW Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WhileStmt ::= T_WHILE Expr CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IfStmt ::= T_IF Expr CodeBlock OptElse 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ArrElemsList ::= ArrElemsList T_COMMA Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ArrElemsList ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OptInit ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OptInit ::= T_ASSIGN T_LBRACE ArrElemsList T_RBRACE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OptInit ::= T_ASSIGN Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IdListWInit ::= IdListWInit T_COMMA OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
			RESULT.addElement (_3);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IdListWInit ::= OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = new Vector ();
			RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdListWOptInit ::= IdListWOptInit T_COMMA OptModifiers T_ID OptInit 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdListWOptInit ::= OptModifiers T_ID OptInit 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdListUpper ::= IdListUpper T_COMMA T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IdListUpper ::= T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IdList ::= IdList T_COMMA OptModifiers T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IdList ::= OptModifiers T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OptRef ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptRef ::= T_AMPERSAND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ParamDecl ::= Type OptRef T_ID 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CodeBlock ::= T_LBRACE NT$6 OptStmtList NT$7 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$7 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$6 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(66/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ReturnType ::= SubType OptPointerList 
            {
              Type RESULT = null;
		
                        // You should determine the type and return it here
                        RESULT = null;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Pointer ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PointerList ::= PointerList Pointer 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PointerList ::= Pointer 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptPointerList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptPointerList ::= PointerList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OptModifiers ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OptModifiers ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OptModifiers ::= PointerList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BasicType ::= T_CHAR 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
    				  RESULT = new BoolType("bool", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
    				  RESULT = new FloatType("float", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
					  RESULT = new IntType("int", 4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(62/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SubType ::= BasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				  RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(63/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SubType ::= QualIdent 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UndecoratedType ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UndecoratedType ::= SubType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _1; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= SubType OptModifiers 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$4 T_LPAREN OptParamList T_RPAREN NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$2 T_LPAREN OptParamList T_RPAREN NT$3 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldList ::= UndecoratedType IdList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldsList ::= FieldsList FieldList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldsList ::= FieldList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypedefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$1 FieldsList T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                         ((MyParser) parser).DoBlockClose();
                         ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypedefDecl ::= T_TYPEDEF Type IdListUpper T_SEMI 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoTypedefDecl (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OptStatic ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OptStatic ::= T_STATIC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= OptStatic T_CONST UndecoratedType IdListWInit T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoConstDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= OptStatic UndecoratedType IdListWOptInit T_SEMI 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoVarDecl (_3,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExternDecl ::= T_EXTERN UndecoratedType IdList T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

