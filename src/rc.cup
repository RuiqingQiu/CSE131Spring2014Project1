
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CHAR,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DELETE,
    T_DECLTYPE,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FUNCPTR,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NEW,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_TRUE,
    T_TYPEDEF,
    T_WHILE,
    T_VOID,
    T_AUTO
    ;

terminal String
    T_CHAR_LITERAL,
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    TypedefDecl,
    FieldsList,
    FieldList,
    OptStmtList,
    StmtList,
    Stmt,
    CodeBlock,
    IfStmt,
    OptElse,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    
    //Phase 0
    NewStmt,
    DeleteStmt,
    
    WritePairList,
    WritePair,
   


    Equality,
    Relation,

    ArrElemsList,
    OptModifiers,
    PointerList,
    Pointer,
	OptPointerList
    ;

non terminal String    
    AddOp,
    MulOp,
    IncDecOp,
    OptRef,
    OptStatic,
    UnarySign
    ;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3,
    QualIdent,
    OptInit,
    ParamDecl,
    ConstExpr
    ;

non terminal Type
    BasicType,
    SubType,
    Type,
    UndecoratedType,
    ReturnType,
    DeclareType
    ;
    	
non terminal Vector
    IdList,
    IdListUpper,
    IdListWOptInit,
    IdListWInit,
    OptParamList,
    ParamList,
    OptExprList,
    ExprList
    ;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=    {:
                         ((MyParser) parser).DoProgramStart(); 
               :}
               OptGlobalDecls
               {:
                       ((MyParser) parser).DoProgramEnd();
               :}
    ;

OptGlobalDecls ::=  GlobalDecls
    |                     /* empty */
    ;

GlobalDecls ::= GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=  ExternDecl
    |               VarDecl
    |               ConstDecl
    |               TypedefDecl
    |               FuncDecl
    |               FuncDef
    ;

ExternDecl ::= T_EXTERN UndecoratedType IdList:_3 T_SEMI
                    {:
                         ((MyParser) parser).DoExternDecl (_3);
                    :}
    ;

VarDecl ::=     OptStatic:_1 UndecoratedType:_2 IdListWOptInit:_3 T_SEMI
                    {:
                         //If error occured, which return a empty vector
                         if(_3.size() == 0){
                         }
                         else{
	                         //If the static keyword is provided
	                         if(_1 != null){
	                           Vector<VarSTO> v = new Vector<VarSTO>();
	                           for(int i = 0; i < _3.size(); i++){
	                             VarSTO s = (VarSTO)_3.elementAt(i);
	                             s.setStatic(true);
	                             s.setType(_2);
	                             v.addElement(s);
	                           }
	                           ((MyParser) parser).DoVarDecl (v,_2);
	                         }
	                         else{
	                            ((MyParser) parser).DoVarDecl (_3,_2);
	                         }
	                     }
                    :}
    |           OptStatic T_AUTO T_ID T_ASSIGN Expr T_SEMI

    ;

ConstDecl ::=  OptStatic:_1 T_CONST UndecoratedType:_2 IdListWInit:_3 T_SEMI
                    {:
                       //If the static keyword is provided
                       if(_1 != null){
                         Vector<VarSTO> v = new Vector<VarSTO>();
                         for(int i = 0; i < _3.size(); i++){
                           VarSTO s = (VarSTO)_3.elementAt(i);
                           s.setStatic(true);
                           s.setType(_2);
                           v.addElement(s);
                         }
                         ((MyParser) parser).DoConstDecl (v, _2);
                       }
                       else{
                         ((MyParser) parser).DoConstDecl (_3, _2);
                       }
                   
                    :}
    |          OptStatic T_CONST T_AUTO T_ID T_ASSIGN Expr T_SEMI
    ;


OptStatic ::=   T_STATIC
				{:
				  RESULT = "static";
				:}
    |               /* empty */
    ;


TypedefDecl ::=     T_TYPEDEF Type:_1 IdListUpper:_2 T_SEMI
                    {:
                        ((MyParser) parser).DoTypedefDecl (_1, _2);
                    :}
    |               T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoBlockOpen();
                    :}
                    FieldsList T_RBRACE T_SEMI
                    {:
                         ((MyParser) parser).DoBlockClose();
                         ((MyParser) parser).DoStructdefDecl (_1);
                    :}
    ;


FieldsList ::=   FieldList
    |               FieldsList FieldList
    ;


FieldList ::=     UndecoratedType IdList T_SEMI
    ;


FuncDef ::=    T_FUNCTION T_COLON ReturnType:_1 OptRef:_4 T_ID:_2
                    {:
                        ((MyParser) parser).SaveLineNum ();
						if(_4.equals("&"))
						  _1.setReference(true);
                        ((MyParser) parser).DoFuncDecl_1(_1, _2);
                    :}
                    T_LPAREN OptParamList:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3);
                    :}
                    T_LBRACE OptStmtList T_RBRACE
                    {:
                    	//Close scope 
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


FuncDecl ::=   T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_2
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_1, _2);
                    :}
                    T_LPAREN OptParamList:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3);
                    :}
                    T_SEMI
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


Type ::=         SubType:_1 OptModifiers
				 {:
				   RESULT = _1;
				 :}
    |               T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList:_3 T_RPAREN
    ;

UndecoratedType ::= SubType:_1
					{:RESULT = _1; :}
    |               T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList:_3 T_RPAREN
    ;

SubType ::=    QualIdent:_1
			   {:
			     //Get the basic type out of TypedefSTO
			     //modifiy the previous type and set its name to be the correct typedef ID
			     
			     Type t = _1.getType().clone();
			     t.setName(_1.getName());
			     RESULT = t;
			   :}
    |               BasicType:_1
    				{:
    				  RESULT = _1;
    				:}
    |			DeclareType:_1
    				{:
    				  //Add for check#3c decltype keyword
    				  RESULT = _1;
    				:}
    ;

DeclareType ::=  T_DECLTYPE T_LPAREN Expr0:_1 T_RPAREN
				 {:
				    Type t = _1.getType();				    
				    t.setName(_1.getType().getName());
				    RESULT = t;
				     
				 :}
	;

BasicType ::=       T_INT 
					{:
					  RESULT = new IntType("int", 4);
					:}
    |               T_FLOAT
    				{:
    				  RESULT = new FloatType("float", 4);
    				:}
    |               T_BOOL
   					{:
    				  RESULT = new BoolType("bool", 4);
    				:}
    |               T_CHAR
    ;


OptModifiers ::= 	PointerList
	|				T_LBRACKET ConstExpr:_1 T_RBRACKET
					{:
					  //Modifier for array type
					  //Check #10, illegal array declaration
					  ((MyParser) parser).DoArrayDeclCheck(_1);
					:}
    |               /* empty */
    ;
	
OptPointerList ::= 	PointerList
    |               /* empty */
    ;


PointerList ::=    Pointer
    |               PointerList Pointer
    ;


Pointer ::=        T_STAR
    ;


ReturnType ::=      SubType:_1 OptPointerList
                    {:
                        // You should determine the type and return it here
                        RESULT = _1;
                    :}
    |               T_VOID
    				{:
    				  RESULT = new VoidType("void", 4);
    				:}

    ;


CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen(); :}
                    OptStmtList
		    {: ((MyParser) parser).DoBlockClose(); :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList
    |               /* empty */
    ;


StmtList ::=        Stmt
    |               StmtList Stmt
    ;


Stmt ::=        VarDecl
    |               ConstDecl
    |               TypedefDecl
    |               CodeBlock
    |               Expr T_SEMI
    |               IfStmt
    |               WhileStmt
    |               BreakStmt
    |               ContinueStmt
    |               ExitStmt
    |               ReturnStmt
    |               ReadStmt
    |               WriteStmt
    |				NewStmt
    |				DeleteStmt
    ;


OptParamList ::=    ParamList:_1
					{:
					  //Return a list of parameter
					  RESULT = _1;
					:}
    |               /* empty */
    				{:
    				  RESULT = new Vector<STO>();
    				:}
    ;


ParamList ::=       ParamDecl:_1
					{:
					  //Return the vector of parameter types
					  Vector<STO> v = new Vector<STO>();
					  v.addElement(_1);
					  RESULT = v;
					:}
    |               ParamList:_1 T_COMMA ParamDecl:_2
    				{:
    				  //Return the vector with the _2 add to the back
    				  _1.addElement(_2);
    				  RESULT = _1;
    				:}
    ;


ParamDecl ::=       Type:_1 OptRef:_3 T_ID:_2
					{:
					  //Check #5 parameter type check, return the type's name
					  //if OptRef is a reference
					  if(_3.equals("&")){
					    _1.setReference(true);
					    RESULT = new VarSTO(_2, _1);
					  }
					  else
					    RESULT = new VarSTO(_2, _1);
					  
					:}
    ;


OptRef ::=          T_AMPERSAND

					{: //Here is parameter pass by reference
					   RESULT = "&";
					 :}
    |               /* empty */	
    				 {: //Here is parameter pass by value
    				 	RESULT ="";		
					 :}	
    ;


IdList ::=          OptModifiers T_ID:_1
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    :}
    |               IdList:_1 T_COMMA OptModifiers T_ID:_3
                    {:
                        RESULT = _1;
                        RESULT.addElement (_3);
                    :}
    ;


IdListUpper ::=     T_ID_U:_1
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    :}
    |               IdListUpper:_1 T_COMMA T_ID_U:_3
                    {:
                        RESULT = _1;
                        RESULT.addElement (_3);
                    :}
    ;

IdListWOptInit ::=  OptModifiers T_ID:_1 OptInit:_2
                    {:
                        if(_2 instanceof ErrorSTO)
                          RESULT = new Vector();
                        else{
	                      //Check if the OptInit is known at compile time
	                      VarSTO v = new VarSTO(_1);
	                      v.setInit(_2);
	                      v.setStatic(false);
	                      RESULT = new Vector();
	                      RESULT.addElement (v);
	                    }
                    :}
    |               IdListWOptInit:_1 T_COMMA OptModifiers T_ID:_3 OptInit:_2
                    {:
                        RESULT = _1;
                        VarSTO v = new VarSTO(_3);
                        v.setInit(_2);
                        v.setStatic(false);
                        RESULT.addElement (v);
                    :}
    ;

IdListWInit ::=     OptModifiers T_ID:_1 T_ASSIGN ConstExpr:_2
                    {:
                      VarSTO v = new VarSTO(_1);
                      v.setInit(_2);
                      v.setStatic(false);
			          RESULT = new Vector ();
			          RESULT.addElement (v);
                    :}
  //|       Do not need an extra rule since we are not doing constant arrays
    |               IdListWInit:_1 T_COMMA OptModifiers T_ID:_3 T_ASSIGN ConstExpr
                    {:
			RESULT = _1;
			RESULT.addElement (_3);
		    :}
    ;


OptInit ::=         T_ASSIGN Expr:_1
					{:
					  RESULT = _1;
					:}
    |               T_ASSIGN T_LBRACE ArrElemsList T_RBRACE
    |               /* empty */
    ;

ArrElemsList ::=    Expr
    |               ArrElemsList T_COMMA Expr
    ;

IfStmt ::=          T_IF Expr:_1 CodeBlock OptElse
					{:
					  RESULT = ((MyParser) parser).DoIfWhileExpr(_1);
					:}
    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE Expr:_1 CodeBlock
					{:
					  RESULT = ((MyParser) parser).DoIfWhileExpr(_1);
					:}
    ;


BreakStmt ::=       T_BREAK T_SEMI
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
                    {:
                       //DoExitStmtCheck if Expr is assignable to an int
                       ((MyParser) parser).DoExitStmtCheck(_1); 
                    :}
    ;


ReturnStmt ::=   T_RETURN T_SEMI
  				 {:
  				   //((MyParser) parser).DoReturnCheck(new VoidType("void",4));
  				   ((MyParser) parser).DoReturnCheck(new ExprSTO("void",new VoidType("void",4)));
  				 :}
    |               T_RETURN Expr:_1 T_SEMI
         	     {:
         	       ((MyParser)parser).DoReturnCheck(_1); 
         	     :}
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator T_SEMI
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList T_SEMI
    ;

//Phase 0
NewStmt  ::= 	T_NEW Designator T_SEMI 
	;

DeleteStmt ::=  T_DELETE Designator T_SEMI 
	;



WritePairList ::=   WritePair
    |               WritePairList T_OSTREAM WritePair
    ;


WritePair ::=    Expr
    |               T_ENDL
    ;


ConstExpr ::=    Expr:_1
                 {:
                   RESULT = _1; 
                 :}
    ;


OptExprList ::=     ExprList:_1
					{:
					  RESULT = _1;
					:}
    |               /* empty */
    				{:
    				  RESULT = new Vector<Type>();
    				:}
    ;


ExprList ::=     Expr:_1
				 {:
				   Vector<STO> v = new Vector<STO>();
				   v.addElement(_1);
				   RESULT = v;
				 :}
    |               ExprList:_1 T_COMMA Expr:_2
    			 {:
    			   _1.addElement(_2);
    			   RESULT = _1;
    			 :}
    ;

Expr ::=         Designator:_1 T_ASSIGN Expr:_2
                 {:
                   RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                 :}
    |               Expr0:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr0 ::=        Expr0:_1 T_OR Expr1:_3
                 {:
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new OrOp(), _3);
                 :}
    |               Expr1:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr1 ::=        Expr1:_1 T_AND Expr2:_3
                 {:
                   RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AndOp(), _3);
                 :}
    |               Expr2:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr2 ::=        Expr2:_1 T_BAR Expr3:_3
                 {:
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwOrOp(), _3);
                 :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=        Expr3:_1 T_CARET Expr4:_3
                 {:
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwXorOp(), _3);
                 :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=        Expr4:_1 T_AMPERSAND Expr5:_3
                 {:
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwAndOp(), _3);
                 :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                    	if(_2.equals("=="))
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new EqualOp(), _3);
                        else
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new NotEqualOp(), _3);
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3
                    {:
                        //check #0
                    	if(_2.equals("<"))
                    	  RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessThanOp(), _3);
                        else if (_2.equals("<="))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessAndEqualThanOp(), _3);
                        else if(_2.equals(">"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterThanOp(), _3);
                        else
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterAndEqualThanOp(), _3);
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        //Check #1
                        if(_2.equals("+"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AddOp(), _3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new MinusOp(),_3);
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=        Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        //Check #1
                        if(_2.equals("*"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1,new MulOp(), _3);
                        else if(_2.equals("/"))
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new DivOp(),_3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new ModOp(),_3); 
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=     T_EQU
				{:
					RESULT = "==";
				:}
    |               T_NEQ
    			{:
    				RESULT = "!=";
    			:}
    ;

//Phase 0
UnarySign ::=   T_PLUS
				{:
				  RESULT = "+";
				:}
	|			T_MINUS
				{:
				  RESULT = "-";
				:}
	;

Relation ::=     T_LT
					{:
						RESULT = "<";
					:}
    |               T_GT
                      {:
                        RESULT = ">";
                      :}
    |               T_LTE
                      {:
                        RESULT = "<=";
                      :}
    |               T_GTE
                      {:
                        RESULT = ">=";
                      :}
    ;


AddOp ::=       T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;


MulOp ::=       T_STAR
                    {:
                        RESULT = "*";
                    :}
    |               T_SLASH
                    {:
                        RESULT = "/";
                    :}
    |               T_MOD
                    {:
                        RESULT = "%";
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = "++";
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = "--";
                    :}
    ;


Designator ::= T_STAR Designator:_1
                    {:
			RESULT = _1;
                    :}
    |   T_AMPERSAND Designator:_1
        {:
            //Argument pass by reference
			RESULT = _1;
        :}
    |   UnarySign:_2 Designator:_1
        {:
            if(_2.equals("+"))
			  RESULT = _1;
			else{
			  if(_1 instanceof ConstSTO){
			    ((ConstSTO)_1).setValue(-(((ConstSTO)_1).getFloatValue()));
			    RESULT = _1;
			  }else if(_1 instanceof VarSTO){
			    ((VarSTO)_1).setNegative(true);
			  }
			}
        :}
    |   T_NOT Designator:_1
        {:
            RESULT = ((MyParser) parser).DoUnaryExpr(_1, new NotOp());
        :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
			RESULT = new ConstSTO("sizeof variable - fix me");
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 T_RPAREN
                    {:
			RESULT = new ConstSTO("sizeof type - fix me");
                    :}
    |               T_LPAREN Type T_RPAREN Designator:_2
                    {:
			RESULT = _2;
                    :}
    |   IncDecOp:_1 Designator:_2
        {:  
            if(_1.equals("++"))
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new IncOp());
			else
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new DecOp());
        :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr T_RBRACKET
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1);
                    :}
    |               Designator2:_1 T_ARROW T_ID
                    {:
                        RESULT = _1;
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                    	if(_2.equals("++"))
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new IncOp());
                        else
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new DecOp());
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_2 T_RPAREN
                    {:
                        //Do function call check #5
                        //OptExprList containing all the parameters
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:
                        ConstSTO s = new ConstSTO(_1,new IntType("int",4));
                        int value = Integer.decode(_1);
                        s.setValue(value);
                        RESULT = s;
                        
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        ConstSTO s = new ConstSTO (_1, new FloatType("float", 4));
                        s.setValue(Double.parseDouble(_1));
                        RESULT = s;
                        
                    :}
    |               T_CHAR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_TRUE
                    {:
                        ConstSTO s = new ConstSTO ("true", new BoolType("bool",4));
                        s.setValue(1.0);
                        RESULT = s;
                    :}
    |               T_FALSE
                    {:
                        ConstSTO s = new ConstSTO ("false", new BoolType("bool",4));
                        s.setValue(0);
                        RESULT = s;
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ConstSTO ("nullptr");
                    :}
    |               T_COLONCOLON T_ID:_1
    				//Check #0 global variable check
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_Global_ID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    :}
    ;


QualIdent ::=       T_ID_U:_1
                    {:
                       //Return a typedefSTO
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    :}
    ;
