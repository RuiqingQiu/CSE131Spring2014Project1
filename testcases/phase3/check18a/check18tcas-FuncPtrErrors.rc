typedef funcptr : int (int x, int y) MYPTRALIAS;

MYPTRALIAS myPtr1, myPtr2;

function : int addition(int x, int y) 
  { return x + y; }
  
function : int subtraction(int x, int y) 
  { return x - y; }
  
function : int main() {
  if (myPtr1 == nullptr) { // error both must be equivalent ptr type
    return 0;
  }
  return 1;
}

funcptr : int (int* x, int* y) fnullPtr = nullptr;


int* p = nullptr;

function : void main2 () {
  int i = 3;
  int x = myPtr1;          // funcptr not assignable to int should print MYPTRALIAS
  float f;                 // funcptr not assignable to float should print MYPTRALIAS
  f = myPtr2;
  
  myPtr2 = myPtr1;
  myPtr1 = myPtr2; 
  (myPtr2)++;        // operator ++ is only for int/float/ptr should print MYPTRALIAS
  p++;
  myPtr2 + myPtr1;         // numeric expected should print MYPTRALIAS
  nullptr + 1;                // numeric expected should print MYPTRALIAS
  *(fnullPtr);             // pointer expected should print MYPTRALIAS
  (*(&fnullPtr))(&i, &i);           // okay

  bool b = fnullPtr;      // should print complete type name 
  fnullPtr + 2; 
  
  addition + 1;       // Declared functions should printout full func ptr type name
  
  
}
