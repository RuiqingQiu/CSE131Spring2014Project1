typedef funcptr : int (int x, int y) MYPTRALIAS;
typedef int[10] IARR;
MYPTRALIAS myPtr1, myPtr2;

function : int addition(int x, int y) { return x + y; }
function : int subtraction(int x, int y) { return x - y; }

function : int main() {
	if (myPtr1 == nullptr) {
		myPtr1 = addition;
	}
	
	cout << myPtr1(4, 6) << endl;
	myPtr2 = subtraction;
	
	cout << myPtr2(5, 2) << endl;
	myPtr2 = myPtr1;
	
	cout << myPtr2(5, 2) << endl;
	myPtr2 = nullptr;
	
	return 0;
}

function : int foo() { return 0; }

function : void main2()
{
	funcptr : int () fp1 = foo;	
	funcptr : int () fp2;	
	
	funcptr : int () fp3 = 30; 					// error : int not assignable
	funcptr : bool (int x, int y) fp4 = true; 	// error : bool not assignable
	
	funcptr : int () fp5 = fp2;
	funcptr : bool () fp6 = fp2;	// error : funcptr : int () not assignable
	funcptr : bool () fp7 = foo;	// error : funcptr : int () not assignable
	
	funcptr : float & (float ** x, int[6] arr) fp8;
	
	funcptr : float (float x, int[5] arr) fp9 = fp8;	// error : funcptr : float & (float ** x, int[6] arr) not assignable
	
	funcptr : int & (int & x, int y, int * z, IARR*** arr) fp10;
	
	fp10 = nullptr;
	
	funcptr : int () fp11 = fp10;		// error : funcptr int & (int & x, int y, int * z, int *** [10] arr) not assignable
	
	typedef funcptr : int () INT_FUNC;
	
	INT_FUNC fp12;
	
	fp5 = fp2;
	
	typedef funcptr : bool() BOOL_FUNC;
	
	BOOL_FUNC fp13;
	
	fp13 = fp12;							// error : INT_FUNC not assignable
	
}

// errors : 7
