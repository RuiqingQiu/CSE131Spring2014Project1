int i;
float f;
bool b;

int intref;
float floatref;
bool boolref;

/* Good Code */
function: int& intfun0() { return i; }
function: int& intfun1() { 
  int i;
  return i; 
}

function: float& floatfun0() { return f; }
function: float& floatfun1() { 
  float f;
  return f; 
}

function: bool& boolfun0() { return b; }
function: bool& boolfun1() { 
  bool b;
  return b; 
}


/* Is this correct? o.O */
//function: void& voidfun() {};
//function: void& voidfun2() { return; }


/* wrong return type */
//Type of return expression (float), not equivalent
//with function's return type (int). 
function: int& errintfun0() { return 1.0; }  

//Return expression is not a modifiable L-value
//for function that returns by reference.
function: int& errintfun1() { return 1+2; }  
function: int& errintfun2() { return 1/2; }
function: int& errintfun3() { return 1*2; }
function: int& errintfun4() { return 1-2; }
function: int& errintfun5() { return 1%2; }
function: float& errfloatfun1() { return 1.2; }

//Type of return expression (int) is not equivalent 
//to the function's return type (float).
function: float& errfloatfun0() { return 1; }  
function: float& errfloatfun4() { return i; }
function: float& errfloatfun5() { 
  int i;
  return i; 
}

//Return expression is not a modifiable L-value 
//for function that returns by reference.
function: bool& errboolfun0() { return true; }
function: bool& errboolfun1() { return false; }

